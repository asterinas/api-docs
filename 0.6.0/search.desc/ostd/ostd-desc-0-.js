searchState.loadedDescShard("ostd", 0, "The standard library for Asterinas and other Rust OSes.\nAccess to a resource is denied.\nThe error type which is returned from the APIs of this …\nInvalid arguments provided.\nInput/output error.\nMemory mapping already exists for the given virtual …\nInsufficient memory available.\nInsufficient system resources.\nArithmetic Overflow occurred.\nPage fault occurred.\nPlatform-specific code.\nThe architecture-independent boot module, which provides a …\nBus operations\nThis module provides some advanced collections.\nConsole output.\nCPU.\nDefines a CPU-local variable.\nPrints to the console.\nPrints to the console, with a newline.\nReturns the argument unchanged.\nInitializes OSTD.\nCalls <code>U::from(self)</code>.\nI/O memory.\nLogging support.\nThis macro is used to mark the kernel entry point.\nVirtual memory (VM).\nGets the offset of a field within a type as a pointer.\nPanic support.\nThe prelude.\nUseful synchronization primitives.\nTasks are the unit of code execution.\nHandles trap across kernel and user space.\nUser space.\nGets the offset of a field within an object as a pointer.\nPlatform-specific code for the x86 platform.\nThe x86 boot module defines the entrypoints of Asterinas …\nThe console I/O.\nDevice-related APIs. This module mainly contains the APIs …\nThe IOMMU support.\nProvides the ability to exit QEMU and return a value as …\nReads the current value of the processor’s time-stamp …\nThe architecture support of context switch.\nThe timer support.\nHandles trap.\nReturns the frequency of TSC. The unit is Hz.\nThe callback function for console input.\nPrints the formatted arguments to the standard output.\nReceives a byte on the serial port. non-blocking\nRegisters a callback function to be called when there is …\nSends a byte on the serial port.\nA port-mapped UART. Copied from uart_16550.\nAn I/O port, representing a specific address in the I/O …\nA marker trait for access types which allow reading port …\nA marker trait for access types which allow writing port …\nA helper trait that implements the read port operation.\nA helper trait that implements the write port operation.\nAn access marker type indicating that a port is only …\nAn access marker type indicating that a port is allowed to …\nAn access marker type indicating that a port is only …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an I/O port.\nReads a <code>Self</code> value from the given port.\nWrites a <code>Self</code> value to the given port.\nA serial port.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a serial port.\nThe page table used by iommu maps the device address space …\nAn enumeration representing possible errors related to …\nError encountered during modification of the page table.\nNo IOMMU is available.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe code that indicates a failed exit.\nThe exit code of x86 QEMU isa debug device. In …\nThe code that indicates a successful exit.\nExits QEMU with the given exit code.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCallee-saved registers.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates new <code>CalleeRegs</code>\nR12\nR13\nR14\nR15\nRBP\nRBX\nRSP\nJiffies is a term used to denote the units of time …\nThe timer frequency (Hz). Here we choose 1000Hz since …\nGets the <code>Duration</code> calculated from the jiffies counts.\nGets the number of jiffies.\nReturns the elapsed time since the system boots up.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new instance.\nRegisters a function that will be executed during the …\nReturns true if this function is called within the context …\nACPI information from the bootloader.\nThe framebuffer arguments.\nThe bootloader does not provide one, a manual search is …\nPhysical address of the RSDP.\nAddress of RSDT provided in RSDP v1.\nAddress of XSDT provided in RSDP v2+.\nMacro generated public getter API.\nThe address of the buffer.\nMacro generated public getter API.\nBits per pixel of the buffer.\nCalls the OSTD-user defined entrypoint of the actual …\nMacro generated public getter API.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe height of the buffer.\nThe initialization method of the boot module.\nMacro generated public getter API.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe module to parse kernel command-line arguments.\nMacro generated public getter API.\nInformation of memory regions in the boot phase.\nMacro generated public getter API.\nThe macro generated boot init callbacks registering …\nThe width of the buffer.\nA string argument\nThe struct to store the parsed kernel command-line …\nA key-value argument\nKernel module arguments\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the argument vector(argv) of the initprocess.\nGets the environment vector(envp) of the initprocess.\nGets the path of the initprocess.\nGets the argument vector of a kernel module.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaybe points to an unplugged DIMM module. It’s bad …\nThe memory region provided as the framebuffer.\nThe place where kernel sections are loaded.\nThe information of initial memory regions that are needed …\nThe type of initial memory regions that are needed for the …\nThe place where kernel modules (e.g. initrd) are loaded, …\nIn ACPI spec, this area needs to be preserved when …\nOnce used in the boot phase. Kernel can reclaim it after …\nReserved by BIOS or bootloader, do not use.\nDirectly usable by the frame allocator.\nThe physical address of the base of the region.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether the region is empty\nConstructs a memory region where kernel sections are …\nThe length in bytes of the region.\nConstructs a valid memory region.\nTruncates regions, resulting in a set of regions that does …\nRemoves range <code>t</code> from self, resulting in 0, 1 or 2 …\nThe type of the region.\nAn error that occurs during bus probing.\nAn error in accessing the configuration space of the …\nThe device does not match the expected criteria.\nReturns the argument unchanged.\nInitializes the bus\nCalls <code>U::from(self)</code>.\nVirtio over MMIO\nPCI bus\nMMIO bus\nMMIO device driver.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProbe an unclaimed mmio device.\nMMIO Common device. TODO: Implement universal access to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator that enumerates all possible PCI …\nMax 31\nBy encoding bus, device, and function into u32, user can …\nReturns the argument unchanged.\nReturns the argument unchanged.\nMax 7\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe page table of all devices is the same. So we can use …\nThe PCI bus used to register PCI devices. If a component …\nPCI device driver, PCI bus will pass the device through …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProbe an unclaimed PCI device.\nId:0x13, PCI Advanced Features\nId:0x02, Accelerated Graphics Part\nId:0x0R, AGP Target PCI-PCI bridge\nId:0x0B, CompactPCI Central Resource Control\nId:0x06, CompactPCI HotSwap\nId:0x0A, Debug port\nId:0x14, Enhanced Allocation\nId:0x10, PCI Express\nId:0x08, HyperTransport\nId:0x05, Message Signalled Interrupts\nId:0x11, MSI-X\nId:0x07, PCI-X\nId:0x01, Power Management\nId:0x12, SATA Data/Index Conf\nId:0x0F, Secure Device\nId:0x0C, PCI Standard Hot-Plug Controller\nId:0x04, Slot Identification\nId:0x0D, Bridge subsystem vendor/device ID\nId:?, Unknown\nId:0x09, Vendor-Specific\nId:0x03, Vital Product Data\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMSI-X capability. It will set the BAR space it uses to be …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVendor specific capability. Users can access this …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhether this BAR is 64bit address or 32bit address\nBAR space in PCI common config space.\nPCI device common config space command register.\nPCI device common config space status register.\nMemory BAR bits type\nReturns the set containing all flags.\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nToggles the set of flags.\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nReturns an empty set of flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nConvert from underlying bit representation, preserving all …\nInserts the specified flags in-place.\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nReturns <code>true</code> if no flags are currently stored.\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nRemoves the specified flags in-place.\nRemoves the specified flags in-place.\nInserts or removes the specified flags depending on the …\nInserts or removes the specified flags depending on the …\nReturns the set difference of the two sets of flags.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nReturns the symmetric difference between the flags in <code>self</code> …\nToggles the specified flags in-place.\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nPCI common device, Contains a range of information and …\nGain access to the BAR space and return None if that BAR …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis module introduces the xarray crate and provides …\nA <code>Cursor</code> can traverse in the <code>XArray</code> by setting or …\nA <code>CursorMut</code> can traverse in the <code>XArray</code> by setting or …\n<code>XArray</code> is an abstract data type functioning like an …\nThe mark type used in the <code>XArray</code>.\nClones the <code>XArray</code> with the COW mechanism.\nCreates a <code>Cursor</code> to perform read-related operations in the …\nCreates a <code>CursorMut</code> to perform read- and write-related …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the target index of the cursor.\nReturns the target index of the cursor.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether the target item is marked with the input …\nChecks whether the target item is marked with the input …\nChecks whether the <code>XArray</code> is marked with the input <code>mark</code>.\nLoads the item at the target index.\nLoads the item at the target index.\nLoads the <code>index</code>-th item.\nMakes a new, empty <code>XArray</code>.\nIncreases the target index of the cursor by one.\nIncreases the target index of the cursor by one.\nCreates a <code>Range</code> which can be immutably iterated over the …\nRemoves the item at the target index, and returns the …\nRemoves the <code>XEntry</code> in the <code>XArray</code> at the target index, and …\nResets the target index to <code>index</code>.\nResets the target index to <code>index</code>.\nSets the input <code>mark</code> for the item at the target index if …\nMarks the <code>XArray</code> with the input <code>mark</code>.\nStores a new <code>item</code> at the target index, and returns the old …\nStores the provided item in the <code>XArray</code> at the target …\nUnsets the input <code>mark</code> for the item at the target index if …\nUnsets the input <code>mark</code> for the <code>XArray</code>.\nUnsets the input <code>mark</code> for all of the items in the <code>XArray</code>.\nPrints formatted arguments to the console.\nThe ALIGNMENT_CHECK exception\nSome severe unrecoverable error\nThe BOUND_RANGE_EXCEEDED exception\nThe BREAKPOINT exception\nThe CONTROL_PROTECTION_EXCEPTION exception\nThe COPROCESSOR_SEGMENT_OVERRUN exception\nCPU exception.\nCPU exception information.\nAs Osdev Wiki defines(https://wiki.osdev.org/Exceptions): …\nCPU-local objects.\nA set of CPUs.\nThe DEBUG exception\nThe DEVICE_NOT_AVAILABLE exception\nThe DIVIDE_BY_ZERO exception\nThe DOUBLE_FAULT exception\nCPU faults. Faults can be corrected, and the program may …\nFaults or traps\nThe floating-point state of CPU.\nThe GENERAL_PROTECTION_FAULT exception\nGeneral registers\n1 if there is no translation for the linear address using …\nThe HYPERVISOR_INJECTION_EXCEPTION exception\n1 if the access was an instruction fetch.\nThe INVAILD_TSS exception\nThe INVALID_OPCODE exception\nCPU interrupts\nThe MACHINE_CHECK exception\nThe NON_MASKABLE_INTERRUPT exception\nThe OVERFLOW exception\nThe PAGE_FAULT exception\n0 if no translation for the linear address.\n1 if the access was a data access to a linear address with …\nPage Fault error code. Following the Intel Architectures …\n1 if there is no translation for the linear address …\nThe RESERVED_15 exception\nThe RESERVED_22 exception\nThe RESERVED_23 exception\nThe RESERVED_24 exception\nThe RESERVED_25 exception\nThe RESERVED_26 exception\nThe RESERVED_27 exception\nThe RESERVED_31 exception\nReserved for future use\nThe SECURITY_EXCEPTION exception\nThe SEGMENT_NOT_PRESENT exception\n1 if the exception is unrelated to paging and resulted …\n1 if the access was a shadow-stack access.\nThe SIMD_FLOATING_POINT_EXCEPTION exception\nThe STACK_SEGMENT_FAULT exception\nCPU traps. Traps are reported immediately after the …\n1 if the access was a user-mode access.\nCpu context, including both general-purpose registers and …\nUser Preemption.\nThe VIRTUALIZATION_EXCEPTION exception\nThe VMM_COMMUNICATION_EXCEPTION exception\n1 if the access was a write.\nThe X87_FLOATING_POINT_EXCEPTION exception\nAdds a CPU with identifier <code>cpu_id</code> to the <code>CpuSet</code>.\nAdds all available CPUs to the <code>CpuSet</code>.\nAdds multiple CPUs from <code>cpu_ids</code> to the <code>CpuSet</code>.\nReturns the set containing all flags.\nReturns the floating point state as a slice.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nBorrow an immutable reference to the underlying value and …\nClears the <code>CpuSet</code>, removing all CPUs.\nClears the state of the instance.\nReturns the complement of this set of flags.\nChecks if the <code>CpuSet</code> contains a specific CPU.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nThe error code associated with the exception.\nReturns a reference to the floating point registers\nReturns a mutable reference to the floating point registers\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nGets the value of fsbase\nReturns a reference to the general registers.\nReturns a mutable reference to the general registers\nGets the value of gsbase\nThe ID of the exception.\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nChecks if the given <code>trap_num</code> is a valid CPU exception.\nReturns <code>true</code> if no flags are currently stored.\nReturns whether the instance can contains data in valid …\nReturns an iterator over the set CPUs.\nChecks if preemption might occur and takes necessary …\nCreates a new instance of <code>UserPreemption</code>.\nInitialize CPU-local object Developer cannot construct a …\nCreates a new instance.\nCreates a new <code>CpuSet</code> with no CPUs included.\nCreates a new <code>CpuSet</code> with all CPUs included.\nReturns the complement of this set of flags.\nReturns the number of CPUs.\nThe ID of the CPU exception.\nThe virtual address where a page fault occurred.\nGets the value of r10\nGets the value of r11\nGets the value of r12\nGets the value of r13\nGets the value of r14\nGets the value of r15\nGets the value of r8\nGets the value of r9\nGets the value of rax\nGets the value of rbp\nGets the value of rbx\nGets the value of rcx\nGets the value of rdi\nGets the value of rdx\nRemoves a CPU with identifier <code>cpu_id</code> from the <code>CpuSet</code>.\nRemoves the specified flags in-place.\nRemoves multiple CPUs from <code>cpu_ids</code> from the <code>CpuSet</code>.\nRestores CPU’s CPU floating pointer states from this …\nGets the value of rflags\nGets the value of rip\nGets the value of rsi\nGets the value of rsp\nSave CPU’s current floating pointer states into this …\nSaves the floating state given by a slice of u8.\nInserts or removes the specified flags depending on the …\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nReturns the ID of this CPU.\nMaps a <code>trap_num</code> to its corresponding CPU exception.\nToggles the specified flags in-place.\nReturns the trap information.\nThe type of the CPU exception.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nI/O memory.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the length of the I/O memory region.\nReturns the physical address of the I/O memory.\nResizes the I/O memory region to the new <code>range</code>.\nThe log level.\nHas the memory page been read or written.\nData flows both from and to the device\nA type to control the cacheability of the main memory.\nHas the memory page been written.\nThe devide address.\nA coherent (or consistent) DMA mapping, which guarantees …\n<code>DmaDirection</code> limits the data flow direction of <code>DmaStream</code> …\nA streaming DMA mapping. Users must synchronize data …\nA slice of streaming DMA mapping.\nMemory regions used for frame buffer.\nData flows form the device\nA trait for types that have mapped address in the device …\nGets physical address trait\nA marker structure used for <code>VmReader</code> and <code>VmWriter</code>, …\nThe maximum virtual address of user space (non inclusive).\nThe page size\nPhysical addresses.\nPage protection permissions and access status.\nThe property of a mapped virtual memory page.\nThe level of a page table node or a frame.\nReadable.\nReadable + writable.\nReadable + writable + executable.\nReadable + execuable.\nData flows to the device\nUncacheable (UC).\nA marker structure used for <code>VmReader</code> and <code>VmWriter</code>, …\nVirtual addresses.\nA trait that enables reading/writing data from/to a VM …\nOptions for mapping physical memory pages into a VM …\n<code>VmReader</code> is a reader for reading data from a contiguous …\nVirtual memory space.\n<code>VmWriter</code> is a writer for writing data to a contiguous …\nWritable.\nWrite-Combining (WC).\nWrite-Protect (WP).\nWriteback (WB).\nWritethrough (WT).\nExecutable.\nSets the address of the new mapping.\nSets the alignment of the address of the mapping.\nReturns the set containing all flags.\nReturns the number of bytes for the available space.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nThe cache policy for the page.\nSets whether the mapping can overwrite any existing …\nClears all mappings\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the cursor pointer, which refers to the address of …\nReturns the cursor pointer, which refers to the address of …\nGets the base address of the mapping in the device address …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nFills the available space by repeating <code>value</code>.\nSets the permissions of the mapping, which affects whether …\nThe flags associated with the page,\nForks a new VM space with copy-on-write semantics.\nUntyped physical memory management.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nConstructs a <code>VmReader</code> from a pointer and a length, which …\nConstructs a <code>VmWriter</code> from a pointer and a length, which …\nConstructs a <code>VmReader</code> from a pointer and a length, which …\nConstructs a <code>VmWriter</code> from a pointer and a length, which …\nReturns if it has available space to write.\nReturns if it has remaining data to read.\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nChecks if the given address is page-aligned.\nLimits the length of remaining data.\nLimits the length of available space.\nMaps some physical memory pages into the VM space …\nCreates a coherent DMA mapping backed by <code>vm_segment</code>.\nEstablishes DMA stream mapping for a given <code>Segment</code>.\nReturns the number of bytes\nReturns the number of bytes.\nCreates a new VM address space.\nConstructs a <code>DmaStreamSlice</code> from the <code>DmaStream</code>.\nCreates a new <code>PageProperty</code> with the given flags and cache …\nCreates the default options.\nCreates a page property that implies an invalid page …\nReturns the number of frames\nReturns the complement of this set of flags.\nReturns the physical address.\nUpdates the VM protection permissions within the VM …\nQueries about the mapping information about a byte in …\nQueries about a range of virtual memory. You will get an …\nReads all data into the writer until one of the two …\nReads a specified number of bytes at a specified offset …\nReads data into the buffer.\nReads all data into the writer until one of the three …\nReads all data into the writer until one of the three …\nReads a slice of a specified type at a specified offset.\nReads a slice of a specified type at a specified offset.\nReads a value of a specified type at a specified offset.\nReads a value of a specified type at a specified offset.\nReads a value of <code>Pod</code> type.\nReads a value of <code>Pod</code> type.\nCreates a reader to read data from the user space of the …\nReturns a reader to read data from it.\nReturns a reader to read data from it.\nRegisters the page fault handler in this <code>VmSpace</code>.\nReturns the number of bytes for the remaining data.\nRemoves the specified flags in-place.\nInserts or removes the specified flags depending on the …\nSkips the first <code>nbytes</code> bytes of data. The length of …\nSkips the first <code>nbytes</code> bytes of data. The length of …\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nSynchronizes the streaming DMA mapping with the device.\nSynchronizes the slice of streaming DMA mapping with the …\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nUnmaps the physical memory pages within the VM address …\nGets the underlying <code>Segment</code>.\nWrites all data from the reader until one of the two …\nWrites a specified number of bytes from a given buffer at …\nWrites data from the buffer.\nWrites all data from the reader until one of the three …\nWrites all data from the reader until one of the three …\nWrites a slice of a specified type at a specified offset.\nWrites a slice of a specified type at a specified offset.\nWrites a value of a specified type at a specified offset.\nWrites a value of a specified type at a specified offset.\nWrites a value of <code>Pod</code> type.\nWrites a value of <code>Pod</code> type.\nWrites a sequence of values given by an iterator (<code>iter</code>) …\nWrites a sequence of values given by an iterator (<code>iter</code>) …\nCreates a writer to write data into the user space.\nReturns a writer to write data into it.\nReturns a writer to write data into it.\nA handle to a physical memory page of untyped memory.\n<code>FrameRef</code> is a struct that can work as <code>&amp;&#39;a Frame</code>.\nReturns a mutable raw pointer to the starting virtual …\nReturns a raw pointer to the starting virtual address of …\nCopies the content of <code>src</code> to the frame.\nReturns the end physical address of the page frame.\nPage frames.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptions for allocating frames\nReturns a reader to read data from it.\nA contiguous range of page frames.\nReturns the size of the frame\nReturns the physical address of the page frame.\nReturns a writer to write data into it.\nA collection of base page frames (regular physical memory …\nAn iterator for frames.\nAppends all the <code>Frame</code>s from <code>more</code> to the end of this …\nCreates an empty <code>FrameVec</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>FrameVec</code> from a single <code>Frame</code>.\nRetrieves a reference to a <code>Frame</code> at the specified index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the frame collection is empty.\nReturns an iterator over all frames.\nReturns the number of frames.\nReturns the number of bytes.\nCreates a new <code>FrameVecIter</code> from the given <code>FrameVec</code>.\nCreates a new <code>FrameVec</code> with the specified capacity.\nPops a frame from the collection.\nPushes a new frame to the collection.\nRemoves a frame at a position.\nTruncates the <code>FrameVec</code> to the specified length.\nOptions for allocating physical memory pages (or frames).\nAllocates a collection of page frames according to the …\nAllocates a contiguous range of page frames according to …\nAllocates a single page frame according to the given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSets whether the allocated frames should be contiguous.\nCreates new options for allocating the specified number of …\nSets whether the allocated frames should be uninitialized.\nA handle to a contiguous range of page frames (physical …\nReturns a mutable raw pointer to the starting virtual …\nReturns a raw pointer to the starting virtual address of …\nReturns the end physical address.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the number of bytes.\nReturns the number of page frames.\nReturns a part of the <code>Segment</code>.\nReturns a reader to read data from it.\nReturns the start physical address.\nReturns a writer to write data into it.\nAborts the QEMU\nThe panic handler must be defined in the binary crate or …\nContains the error value\nContains the success value\nA specialized <code>Result</code> type for this crate.\nPrints to the console.\nPrints to the console, with a newline.\nAn guard that provides exclusive access to the data …\nA guard that provides shared read access to the data …\nA upgradable guard that provides read access to the data …\nA guard that provides exclusive write access to the data …\nA guard that provides shared read access to the data …\nA upgradable guard that provides read access to the data …\nA guard that provides exclusive write access to the data …\nA guard that provides exclusive access to the data …\nA fixed number of bits taht can be safely shared between …\nA mutex with waitqueue.\nA guard that provides exclusive access to the data …\nSpin-based Read-write Lock\nA guard that provides shared read access to the data …\nA upgradable guard that provides read access to the data …\nA guard that provides exclusive write access to the data …\nA mutex that provides data access to either one writer or …\nA guard that provides shared read access to the data …\nA upgradable guard that provides read access to the data …\nA guard that provides exclusive write access to the data …\nA spin lock.\nA guard that provides exclusive access to the data …\nA wait queue.\nA waiter that can put the current thread to sleep until it …\nA waker that can wake up the associated <code>Waiter</code>.\nClears all the bits.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the bit at a given position.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAre all bits zeroes.\nAre all bits ones.\nGets an iterator for the bits.\nGets an iterator that gives the positions of all 1s in the …\nGets an iterator that gives the positions of all 0s in the …\nReturns the length in bits.\nAcquires the mutex.\nAcquires the spin lock without disabling local IRQs.\nAcquires the mutex through an <code>Arc</code>.\nAcquires the spin lock through an <code>Arc</code>.\nAcquires the spin lock with disabling the local IRQs. This …\nCreates a new mutex.\nCreates a new spin-based read-write lock with an initial …\nCreates a new read-write mutex with an initial value.\nCreates a new spin lock.\nCreates a new, empty wait queue.\nCreates a given number of bit 1s.\nCreates a waiter and its associated <code>Waker</code>.\nCreates a given number of bit 0s.\nAcquires a read lock and spin-wait until it can be …\nAcquires a read mutex and sleep until it can be acquired.\nAcquires a read lock through an <code>Arc</code>.\nAcquires a read lock while disabling the local IRQs and …\nSets the bit at a given position.\nTries Acquire the mutex immedidately.\nTries acquiring the spin lock immedidately without …\nTries acquire the mutex through an <code>Arc</code>.\nTries acquiring the spin lock immedidately with disabling …\nAttempts to acquire a read lock.\nAttempts to acquire a read mutex.\nAttempts to acquire an read lock through an <code>Arc</code>.\nAttempts to acquire a read lock while disabling local IRQs.\nAttempts to acquire an upread lock.\nAttempts to acquire a upread mutex.\nAttempts to acquire an upgradeable read lock through an <code>Arc</code>…\nAttempts to acquire a upread lock while disabling local …\nAttempts to acquire a write lock.\nAttempts to acquire a write mutex.\nAttempts to acquire a write lock while disabling local …\nAcquires an upreader and spin-wait until it can be …\nAcquires a upread mutex and sleep until it can be acquired.\nAcquires an upgradeable read lock through an <code>Arc</code>.\nAcquires an upgradeable reader (upreader) while disabling …\nWaits until the waiter is woken up by calling …\nWaits until some condition is met.\nWakes up all waiting threads, returning the number of …\nWakes up one waiting thread, if there is one at the point …\nWakes up the associated <code>Waiter</code>.\nGets the associated <code>Waker</code> of the current waiter.\nAcquires a write lock and spin-wait until it can be …\nAcquires a write mutex and sleep until it can be acquired.\nAcquires a write lock through an <code>Arc</code>.\nAcquires a write lock while disabling the local IRQs and …\nA guard for disable preempt.\nThe task has exited.\nA simple FIFO (First-In-First-Out) task scheduler.\nThe priority of a task.\nThe task is runnable.\nA scheduler for tasks.\nThe task is sleeping in the background.\nThe task is running in the foreground but will sleep when …\nA task that executes a function to the end.\nTrait for manipulating the task context.\nOptions to create or spawn a new task.\nThe status of a task.\nAdds a task to the global scheduler.\nBuilds a new task without running it immediately.\nSets the CPU affinity mask for the task.\nGets the current task.\nRetrieves the current task running on the processor.\nReturns the task data.\nSets the data associated with the task.\nDequeues a task from the scheduler.\nDequeues a task from the front of the queue, if any.\nDisables preemption.\nEnqueues a task to the scheduler.\nEnqueues a task to the end of the queue.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the function that represents the entry point of the …\nReturns the value of the <code>Priority</code>.\nReturns a <code>Priority</code> representing a high priority.\nReturns a <code>Priority</code> representing the highest priority (0).\nGets instruction pointer\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the task has a real-time priority.\nChecks if the <code>Priority</code> is considered a real-time priority.\nReturns a <code>Priority</code> representing a low priority.\nReturns a <code>Priority</code> representing the lowest priority (139).\nCreates a new instance of <code>FifoScheduler</code>.\nCreates a set of options for a task.\nCreates a new <code>Priority</code> with the specified value.\nReturns a <code>Priority</code> representing a normal priority.\nPreempts the <code>task</code>.\nSets the priority of the task.\nRuns the task.\nCalls this function to switch to other task by using …\nSets the value of the <code>Priority</code>.\nSets instruction pointer\nSets the global task scheduler.\nSets stack pointer\nTells whether the given task should be preempted by other …\nIn this simple implementation, task preemption is not …\nBuilds a new task and run it immediately.\nGets stack pointer\nReturns the task status.\nTransfer this guard to a new guard. This guard must be …\nReturns the user space of this task, if it has.\nSets the user space associated with the task.\nYields execution so that another task may be scheduled.\nA guard for disabled local IRQs.\nType alias for the irq callback function.\nAn Interrupt ReQuest(IRQ) line. User can use <code>alloc</code> or …\nTrap frame of kernel interrupt\nAllocates an available IRQ line.\nAllocates a specific IRQ line.\nDisables all IRQs on the current CPU (i.e., locally).\nEnables all IRQs on the current CPU.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns whether we are in the interrupt context.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if there are no registered callbacks.\nGets the IRQ number.\nRegisters a callback that will be invoked when the IRQ is …\nSoftware interrupt.\nTransfers the saved IRQ status of this guard to a new …\nA representation of a software interrupt (softirq) line.\nEnables a softirq line by registering its callback.\nReturns the argument unchanged.\nGets a softirq line.\nGets the ID of this softirq line.\nCalls <code>U::from(self)</code>.\nReturns whether this softirq line is enabled.\nRaises the softirq, marking it as pending.\nA kernel event is pending\nA reason as to why the control of the CPU is returned from …\nThe common interface that every CPU architecture-specific …\nA CPU exception is triggered by the user space.\nCode execution in the user mode.\nA user space.\nA system call is issued by the user space.\nReturns an immutable reference the user-mode CPU context.\nReturns a mutable reference the user-mode CPU context.\nStarts executing in the user mode. Make sure current task …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the instruction pointer\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new instance.\nCreates a new <code>UserMode</code>.\nSets the instruction pointer\nSets the stack pointer\nGets the stack pointer\nGets the trap error code of this interrupt.\nGets the trap number of this interrupt.\nReturns the user mode that is bound to the current task …\nReturns the VM address space.")