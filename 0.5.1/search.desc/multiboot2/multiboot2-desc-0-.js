searchState.loadedDescShard("multiboot2", 0, "Library that assists parsing the Multiboot2 Information …\nFirmware-reserved addresses.\nMemory that holds ACPI tables. Can be reclaimed after they …\nThe section occupies memory during the process execution.\nUsable memory holding ACPI information.\nTag <code>14</code>: Also called “AcpiOld” in other multiboot2 …\nTag <code>15</code>: Refers to version 2 and later of Acpi. Also called …\nTag <code>10</code>: APM table. See Advanced Power Management (APM) …\nAvailable memory free to be used by the OS.\nCode of the boot drivers.\nMemory used to store boot drivers’ data.\nTag <code>4</code>: ‘mem_lower’ and ‘mem_upper’ indicate the …\nBasic memory info tag.\nA Multiboot 2 Boot Information (MBI) accessor.\nThe basic header of a boot information.\nTag <code>2</code>: Name of the bootloader, e.g. ‘GRUB …\nThe bootloader name tag.\nTag <code>5</code>: This tag indicates which BIOS disk device the boot …\nColor support.\nFree usable memory.\nThis memory region is capable of being protected with the …\nTag <code>1</code>: Additional command line string. For example <code>&#39;&#39;</code> or …\nThis tag contains the command line string.\nCustom memory map type.\nCustom tag types <code>&gt; 21</code>. The Multiboot2 spec doesn’t …\nMemory which is occupied by defective RAM modules.\nThe section holds dynamic linking tables.\nThis section holds a dynamic loader symbol table.\nEFI ExitBootServices was not called tag.\nTag that contains the pointer to the boot loader’s UEFI …\nTag that contains the pointer to the boot loader’s UEFI …\nThe type of a memory range.\nFlags describing the capabilities of a memory range.\nA structure describing a region of memory.\nEFI memory map tag. The embedded <code>EFIMemoryDesc</code>s follows …\nEFI system table in 32 bit mode tag.\nEFI system table in 64 bit mode tag.\nThe section contains executable machine instructions.\nSupports disabling code execution.\nTag <code>11</code>: This tag contains pointer to i386 EFI system table.\nTag <code>19</code>: This tag contains pointer to EFI i386 image …\nTag <code>21</code>: This tag contains pointer to amd64 EFI system …\nTag <code>20</code>: This tag contains pointer to EFI amd64 image …\nTag <code>18</code>: This tag indicates ExitBootServices wasn’t …\nTag <code>17</code>: This tag contains EFI memory map as per EFI …\nA single generic ELF Section.\nELF Section bitflags.\nAn iterator over some ELF sections.\nAn enum abstraction over raw ELF section types.\nTag <code>9</code>: This tag contains section header table from an ELF …\nThis tag contains the section header table from an ELF …\nTag <code>0</code>: Marks the end of the tags.\nThe end tag ends the information struct.\nValues in this inclusive range (<code>[0x6000_0000, 0x6FFF_FFFF)</code>…\nTag <code>8</code>: Framebuffer.\nA framebuffer color descriptor in the palette.\nAn RGB color type field.\nThe VBE Framebuffer information tag.\nThe type of framebuffer.\nMode type (text or graphics).\nThe numeric ID of this tag.\nThese bits are reserved for describing optional …\nThis memory region is described with additional …\nThe address is invalid. Make sure that the address is …\nThe total size of the multiboot2 information structure …\nThe physical load address tag. Typically, this is only …\nIndexed color.\nLinear framebuffer availability.\nThe code portions of a loaded UEFI application.\nThe data portions of a loaded UEFI applications, as well …\nThis section holds a linker symbol table.\nTag <code>21</code>: This tag contains image load base physical …\nMagic number that a Multiboot2-compliant boot loader will …\nA region used for memory-mapped I/O.\nAddress space used for memory-mapped port I/O.\nThis memory region is more reliable than other memory.\nError type that describes errors while loading/parsing a …\nA descriptor for an available or taken area of physical …\nAbstraction over defined memory types for the memory map …\nABI-friendly version of <code>MemoryAreaType</code>.\nThis tag provides an initial host memory map (legacy boot, …\nThe type for metadata in pointers and references to <code>Self</code>.\nThere is no terminating NUL character, although the …\nTag <code>6</code>: Memory map. The map provided is guaranteed to list …\nTag <code>3</code>: Additional Multiboot modules, which are BLOBs …\nAn iterator over all module tags.\nThe module tag can occur multiple times and specifies …\nPersistent memory.\nIs the controller VGA compatible.\nVGA compatibility.\nVGA Window compatibility.\nTag <code>16</code>: This tag contains network information in the …\nMissing end tag. Each multiboot2 boot information requires …\nThis section holds information that marks the file in some …\nAddress space which is part of the processor.\nMemory region which is usable and is also non-volatile.\nColor ramp is fixed when cleared and programmable when set.\nProvides the pointer metadata type of any pointed-to type.\nGenerates an implementation of <code>Pointee</code> for structs with a …\nValues in this inclusive range (<code>[0x7000_0000, 0x7FFF_FFFF)</code>…\nThe section holds information defined by the program, …\nThe operating behaviour of the RAMDAC.\nWindow is readable?\nThis memory range can be set as read-only.\nSupports read-protection.\nRelocatable window(s) supported?\nThis enum variant is not used.\nBits in Rsvd field when cleared are reserved and usable …\nDirect RGB color.\nThis memory must be mapped by the OS when a runtime …\nRuntime drivers’ code.\nRuntime services’ code.\nThe section holds relocation entries without explicit …\nThe section holds relocation entries with explicit …\nThis section type is reserved but has unspecified …\nA reserved area that must not be used.\nReserved memory which needs to be preserved on hibernation.\nThis tag contains a copy of RSDP as defined per ACPI 1.0 …\nThis tag contains a copy of RSDP as defined per ACPI 2.0 …\nThis memory is earmarked for specific purposes such as for …\nMode supported by hardware configuration.\nCan the DAC be switched between 6 and 8 bit modes.\nTag <code>13</code>: This tag contains a copy of SMBIOS tables as well …\nThis tag contains a copy of SMBIOS tables as well as their …\nError type describing failures when parsing the string …\nThe section holds a string table.\nThe section holds a symbol hash table.\nTTY Output functions supported by BIOS\nCommon base structure for all tags that can be passed via …\nA trait to abstract over all sized and unsized tags …\nHigher level abstraction for <code>TagTypeId</code> that assigns each …\nSerialized form of <code>TagType</code> that matches the binary …\nEGA Text.\nSupports marking as uncacheable, exported and supports the …\nSupports marking as uncacheable.\nMemory in which errors have been detected.\nA section of this type occupies no space in the file but …\nThis value marks the section header as inactive; it does …\nThe sequence until the first NUL character is not valid …\nThe Capabilities field indicates the support of specific …\nVBE controller information.\nThe DirectColorModeInfo field describes important …\nA VBE colour field.\nThis tag contains VBE metadata, VBE controller information …\nThe MemoryModel field specifies the general type of memory …\nA Mode attributes bitfield.\nExtended information about a specific VBE display mode …\nThe WindowAttributes describe the characteristics of the …\nMemory descriptor version number.\nTag <code>7</code>: Contains the VBE control information returned by …\nThe section contains data that should be writable during …\nWindow is writeable?\nSupport write-back.\nSupports write-combining.\nSupports write-protection.\nSupports write-through.\nGet the section’s address alignment constraints.\nContains framebuffer physical address.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nReturns the tag as the common base tag structure.\nReturns the tag as the common base tag structure.\nReturns a slice to the underlying bytes of the tag. This …\nReturns a slice to the underlying bytes of the tag. This …\nGet the start address of the boot info as pointer.\nThe capability attributes of this memory range.\nBank size (Measured in Kilobytes.)\nSearch for the basic memory info tag.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe Blue component of the color.\nBlue colour field.\nSearch for the BootLoader name tag.\nContains number of bits per pixel.\nBits per pixel\nThe type of framebuffer, one of: <code>Indexed</code>, <code>RGB</code> or <code>Text</code>.\nModule for the builder-feature.\nCapabilities of the graphics controller.\nCasts the base tag to the specific tag type.\nCharacter cell width and height in pixels.\nValidation of the RSDPv1 checksum\nValidation of the RSDPv2 extended checksum\nReads the command line of the kernel as Rust string slice …\nReads the command line of the boot module as Rust string …\nSearch for the Command line tag.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nContains VBE controller information returned by the VBE …\nConstruct a custom <code>MemoryType</code>. Values in the range …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nDirect colour mode attributes.\nReturns the amount of items in the dynamically sized …\nSearch for the EFI boot services not exited tag.\nSearch for the EFI 32-bit image handle pointer tag.\nSearch for the EFI 64-bit image handle pointer tag.\nSearch for the EFI Memory map tag, if the boot services …\nSearch for the EFI 32-bit SDT tag.\nSearch for the EFI 64-bit SDT tag.\nReturns an <code>ElfSectionIter</code> iterator over the ELF Sections, …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet the end address of the boot info.\nGet the physical end address of the section.\nThe end address of the memory region.\nEnd address of the module\nReturns the entry size.\nReturns the entry version.\nThis field is used to calculate the checksum of the entire …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet the section’s flags.\nPhysical address for flat memory frame buffer\nSearch for the VBE framebuffer tag. The result is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a reference to a (dynamically sized) tag type in a …\nCreates a reference to a (dynamically sized) tag type in a …\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nPublic getter to find any Multiboot tag by its type, …\nThe Green component of the color.\nGreen colour field.\nContains framebuffer height in pixels.\nReturns the physical address of the EFI image handle.\nReturns the physical address of the EFI image handle.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nContain the segment length of the table of a protected …\nContain the segment offset of the table of a protected …\nContain the segment of the table of a protected mode …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nCheck if the <code>ALLOCATED</code> flag is set in the section flags.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nLoads the <code>BootInformation</code> from a pointer. The pointer must …\nReturns the load base address.\nSearch for the Image Load Base Physical Address tag.\nReturn the slice of the provided <code>MemoryArea</code>s.\nReturns an iterator over the provided memory areas.\nSearch for the Memory map tag.\nMemory model type\nIndicates current video mode in the format specified in …\nMode attributes.\nContains VBE mode information returned by the VBE Function …\nFar pointer to the video mode list.\nThe size of the module/the BLOB in memory.\nGet an iterator of all module tags.\nReads the name of the bootloader that is booting the …\nRead the name of the section.\nCreate a new command line tag from the given string.\nCreate a new tag to pass the EFI32 System Table pointer.\nCreate a new tag to pass the EFI64 System Table pointer.\nCreate a new ElfSectionsTag with the given data.\nCreate a new MemoryArea.\nConstructor.\nCreate a new EFI memory map tag with the given memory …\nCreate a new EFI memory map tag from the given EFI memory …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nNumber of banks\nNumber of images.\nNumber of memory planes.\nAn OEM-supplied string that identifies the OEM.\nAn OEM-supplied string that identifies the OEM.\nFar pointer to the product name string.\nFar pointer to the product revision string.\nVBE implementation software revision.\nA far pointer the the OEM String.\nFar pointer to the vendor name string.\nA pointer to the start of off screen memory.\nThe amount of off screen memory in 1k units.\nNumber of 4 KiB pages contained in this range.\nParses the provided byte sequence as Multiboot string, …\nStarting physical address.\nContains the pitch in bytes.\nBytes per scan line\nColor field position.\ndefine the bit position within the direct color pixel or …\nThe Red component of the color.\nRed colour field.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReserved colour field.\nHorizontal and vertical resolution in pixels or characters.\nThe revision of the ACPI.\nThe revision of the ACPI.\nSearch for the (ACPI 1.0) RSDP tag.\nSearch for the (ACPI 2.0 or later) RSDP tag.\nThe physical (I repeat: physical) address of the RSDT …\nThe physical address of a i386 EFI system table.\nThe physical address of a x86_64 EFI system table.\nGet the section type as a <code>ElfSectionType</code> enum variant.\nGet the “raw” section type as a <code>u32</code>\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe “RSD PTR “ marker signature.\nThe “RSD PTR “ marker signature.\nVBE Signature aka “VESA”.\nReturns the total size of the tag. The depends on the <code>size</code> …\nReturns the total size of the tag. The depends on the <code>size</code> …\nGet the section’s size in bytes.\nThe size, in bytes, of the memory region.\nColor mask size.\nThe size, in bits, of the color components of a direct …\nSearch for the SMBIOS tag.\nGet the start address of the boot info.\nGet the physical start address of the section.\nThe start address of the memory region.\nStart address of the module.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nNumber of 64KiB memory blocks (Added for VBE 2.0+).\nGet the total size of the boot info struct.\nType of memory occupying this range.\nThe type of the memory region.\nReturns the underlying type of the tag.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nConvenient wrapper to get the underlying <code>u32</code> …\nSearch for the VBE information tag.\nThe VBE version.\nStarting virtual address.\nContains framebuffer width in pixels.\nWindow A attributes.\nWindow A start segment.\nWindow B attributes.\nWindow B start segment.\nReal mode pointer to window function.\nWindow granularity (Measured in Kilobytes.)\nWindow size.\nPhysical address of the XSDT table.\nHelper trait for all structs that need to be serialized …\nA helper type to create boxed DST, i.e., tags with a …\nBuilder to construct a valid Multiboot2 information …\nAdds a ‘Modules’ tag (represented by <code>ModuleTag</code>) to the …\nAdds a arbitrary tag that implements <code>TagTrait</code> to the …\nAdds a ‘basic memory information’ tag (represented by …\nAdds a ‘bootloader name’ tag (represented by …\nConstructs the bytes for a valid Multiboot2 information …\nAdds a ‘command line’ tag (represented by …\nAdds a ‘EFI boot services not terminated’ tag …\nAdds a ‘EFI 32-bit image handle pointer’ tag …\nAdds a ‘EFI 64-bit image handle pointer’ tag …\nAdds a ‘EFI Memory map’ tag (represented by …\nAdds a ‘EFI 32-bit system table pointer’ tag …\nAdds a ‘EFI 64-bit system table pointer’ tag …\nAdds a ‘ELF-Symbols’ tag (represented by <code>ElfSectionsTag</code>…\nReturns the expected length of the boot information, when …\nAdds a ‘Framebuffer info’ tag (represented by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdds a ‘Image load base physical address’ tag …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdds a (<em>none EFI</em>) ‘memory map’ tag (represented by …\nCreates a new builder.\nAdds a ‘ACPI old RSDP’ tag (represented by <code>RsdpV1Tag</code>) …\nAdds a ‘ACPI new RSDP’ tag (represented by <code>RsdpV2Tag</code>) …\nAdds a ‘SMBIOS tables’ tag (represented by <code>SmbiosTag</code>) …")