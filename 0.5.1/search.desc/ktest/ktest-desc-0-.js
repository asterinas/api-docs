searchState.loadedDescShard("ktest", 0, "The kernel mode testing framework of Asterinas.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe test attribute macro to mark a test function.\nRun the test with a given catch_unwind implementation.\nTest runner enabling control over the tests.\nThe source module tree of ktests.\nFind if any suffix of the path exists in the suffix trie.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFind if there is a perfect match in this suffix trie.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRun all the tests registered by <code>#[ktest]</code> in the …\nThe <code>KtestCrateIter</code> will iterate over all modules in a …\nThe <code>KtestModuleIter</code> will iterate over all tests in a …\nThe <code>KtestTreeIter</code> will iterate over all crates. Yeilding …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")