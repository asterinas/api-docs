searchState.loadedDescShard("ostd", 0, "The standard library for Asterinas and other Rust OSes.\nAccess to a resource is denied.\nThe error type which is returned from the APIs of this …\nInvalid arguments provided.\nInput/output error.\nInsufficient memory available.\nInsufficient system resources.\nArithmetic Overflow occurred.\nPage fault occurred.\nA marker trait for plain old data (POD).\nDeriving <code>Pod</code> trait for a struct or union.\nPlatform-specific code for the x86 platform.\nAs a slice of bytes.\nAs a mutable slice of bytes.\nThe architecture-independent boot module, which provides\nBus operations\nConsole output.\nAsserts that a boolean expression is <code>true</code> at compile-time.\nCPU-related definitions.\nDefines a statically-allocated CPU-local variable.\nDefines an inner-mutable CPU-local variable.\nPrints to the console.\nPrints to the console with a newline.\nReturns the argument unchanged.\nCreates a new instance from the given bytes.\nA macro attribute for the global frame allocator.\nA macro attribute to register the global heap allocator.\nA macro attribute to map allocation layouts to slot sizes …\nInserts a TDX-specific code block.\nMakes a structure usable as a frame metadata.\nMakes a structure usable as untyped frame metadata.\nCalls <code>U::from(self)</code>.\nDevice I/O access and corresponding allocator.\nLogging support.\nA macro attribute to mark the kernel entry point.\nVirtual memory (VM).\nCreates a new instance of Pod type with uninitialized …\nCreates a new instance of Pod type that is filled with …\nPanic support.\nA macro attribute for the panic handler.\nThe prelude.\nCreates a pointer whose type matches the expression, but …\nSymmetric Multi-Processing (SMP) support.\nUseful synchronization primitives.\nTasks are the unit of code execution.\nThe timer support.\nHandles trap across kernel and user space.\nUser mode.\nUtility types and methods.\nThe x86 boot module defines the entrypoints of Asterinas …\nDevice-related APIs. This module mainly contains the APIs …\nInserts a TDX-specific code block.\nArchitecture kernel module.\nProvides the ability to exit QEMU and return a value as …\nReads a hardware generated 64-bit random value.\nReads the current value of the processor’s time-stamp …\nThe timer support.\nHandles trap.\nReturns the frequency of TSC. The unit is Hz.\nMultiprocessor Boot Support\nProvides CMOS I/O port access.\nI/O port access.\nA port-mapped UART. Copied from uart_16550.\nCMOS address I/O port\nCMOS data I/O port\nGets the century register location. This function is used …\nA marker trait for access types which allow reading port …\nA marker trait for access types which allow writing port …\nA helper trait that implements the read port operation.\nA helper trait that implements the write port operation.\nAn access marker type indicating that a port is only …\nAn access marker type indicating that a port is allowed to …\nAn access marker type indicating that a port is only …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads a <code>Self</code> value from the given port.\nWrites a <code>Self</code> value to the given port.\nA serial port.\nReturns the argument unchanged.\nInitializes the serial port.\nCalls <code>U::from(self)</code>.\nGets line status\nCreates a serial port.\nReceives data from the data port\nSends data to the data port\nThe <code>IrqChip</code> singleton.\nAn IRQ chip.\nAn <code>IrqLine</code> mapped to an IRQ pin managed by an <code>IrqChip</code>.\nCounts the number of I/O APICs.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaps an IRQ pin specified by a GSI number to an IRQ line.\nMaps an IRQ pin specified by an ISA interrupt number to an …\nThe code that indicates a failed exit.\nThe exit code of x86 QEMU isa debug device.\nThe code that indicates a successful exit.\nExits QEMU with the given exit code.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe timer frequency (Hz).\nTrap frame of kernel interrupt\nReturns the argument unchanged.\nInjects a custom handler for page faults that occur in the …\nCalls <code>U::from(self)</code>.\nReturns true if this function is called within the context …\nThe boot information provided by the bootloader.\nACPI information from the bootloader.\nThe framebuffer arguments.\nThe bootloader does not provide one, a manual search is …\nPhysical address of the RSDP.\nAddress of RSDT provided in RSDP v1.\nAddress of XSDT provided in RSDP v2+.\nThe address of the buffer.\nGets the boot information.\nThe name of the bootloader.\nBits per pixel of the buffer.\nThe framebuffer arguments.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe height of the buffer.\nThe initial ramfs raw bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe kernel command line arguments.\nInformation of memory regions in the boot phase.\nThe memory regions provided by the bootloader.\nSymmetric multiprocessing (SMP) boot support.\nThe width of the buffer.\nMaybe points to an unplugged DIMM module. It’s bad …\nThe memory region provided as the framebuffer.\nThe place where kernel sections are loaded.\nThe maximum number of regions that can be handled.\nThe information of initial memory regions that are needed …\nA heapless set of memory regions.\nThe type of initial memory regions that are needed for the …\nThe place where kernel modules (e.g. initrd) are loaded, …\nIn ACPI spec, this area needs to be preserved when …\nOnce used in the boot phase. Kernel can reclaim it after …\nReserved by BIOS or bootloader, do not use.\nSome holes not specified by the bootloader/firmware. It …\nDirectly usable by the frame allocator.\nConstructs a bad memory region.\nThe physical address of the base of the region.\nThe physical address of the end of the region.\nConstructs a framebuffer memory region.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSorts the regions and returns a full set of …\nChecks whether the region is empty\nConstructs a memory region where kernel sections are …\nThe length in bytes of the region.\nConstructs a module memory region from a byte slice that …\nConstructs an empty set.\nConstructs a valid memory region.\nAppends a region to the set.\nThe type of the region.\nRegisters the entry function for the application processor.\nAn error that occurs during bus probing.\nAn error in accessing the configuration space of the …\nThe device does not match the expected criteria.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPCI bus\nPCI bus instance\nPCI device ID\nPCI device Location\nReturns an iterator that enumerates all possible PCI …\nPCI bus\nBus number\nPCI device capabilities.\nThe PCI configuration space.\nSpecifies the type of function the device performs.\nPCI device common definitions or functions.\nDevice number with max 31\nDevice ID\nReturns the argument unchanged.\nReturns the argument unchanged.\nDevice number with max 7\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProgramming Interface Byte\nRevision ID\nSpecifies the specific function the device performs.\nSubsystem ID\nSubsystem Vendor ID\nVendor ID\nThe page table of all devices is the same. So we can use …\nThe PCI bus used to register PCI devices. If a component …\nPciDevice trait.\nPCI device driver, PCI bus will pass the device through …\nGets device id.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProbe an unclaimed PCI device.\nRegisters a PCI driver to the PCI bus.\nId:0x13, PCI Advanced Features\nId:0x02, Accelerated Graphics Part\nId:0x0R, AGP Target PCI-PCI bridge\nPCI Capability\nPCI Capability data.\nId:0x0B, CompactPCI Central Resource Control\nId:0x06, CompactPCI HotSwap\nId:0x0A, Debug port\nId:0x14, Enhanced Allocation\nId:0x10, PCI Express\nId:0x08, HyperTransport\nId:0x05, Message Signalled Interrupts\nId:0x11, MSI-X\nId:0x07, PCI-X\nId:0x01, Power Management\nId:0x12, SATA Data/Index Conf\nId:0x0F, Secure Device\nId:0x0C, PCI Standard Hot-Plug Controller\nId:0x04, Slot Identification\nId:0x0D, Bridge subsystem vendor/device ID\nId:?, Unknown\nId:0x09, Vendor-Specific\nId:0x03, Vital Product Data\nGets the capability data\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMSI-X capability support.\nVendor-specific capability support.\nMSI-X capability. It will set the BAR space it uses to be …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets mutable IrqLine. User can register callbacks by using …\nReturns true if MSI-X Enable bit is set.\nEnables an interrupt line, it will replace the old handle …\nMSI-X Table size\nVendor specific capability. Users can access this …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe length of this capability\nReads u16 from the capability.\nReads u32 from the capability.\nReads u8 from the capability.\nWrites u16 to the capability.\nWrites u32 to the capability.\nWrites u8 to the capability.\nWhether this BAR is 64bit address or 32bit address\nSets to 1 if the device can behave as a bus master.\nBAR space in PCI common config space.\nBase Address Register #0\nBase Address Register #1\nBase Address Register #2\nBase Address Register #3\nBase Address Register #4\nBase Address Register #5\nBIST: Represents the status and allows control of a …\n32 bits\n64 bits\nSets to 1 if the device support capabilities.\nCache Line Size\nCapabilities pointer\nCardbus CIS Pointer\nClass code\nPCI device common config space command register.\nPCI Command\nSets to 1 when the device detects a parity error, even if …\nThe read-only bit that represent the slowest time that a …\nCheck <code>DEVSEL_MEDIUM_TIMING</code>\nDevice ID\nSets to 1 if the device can accept fast back-to-back …\nSets to 1 if the device is allowed to generate fast …\nHeader Type: Identifies the layout of the header.\nSets to 1 if the assertion of the devices INTx# signal is …\nThe status of the device’s INTx# signal.\nSets to 1 if the device can respond to I/O Space accesses.\nInterrupt Line\nINterrupt PIN\nI/O BAR\nI/O port BAR.\nLatency Timer\nThis bit is only set when the following conditions are met:\nSets to 1 if the device can respond to Memory SPace …\nSets to 1 if the device is capable of running at 66 MHz.\nMemory Write and Invalidate Enable. Set to 1 if the device …\nMax latency\nMemory BAR\nMemory BAR\nMin Grant\nSets to 1 if the device will takes its normal action when …\nOffset in PCI device’s common configuration space(Not …\nSets to 1 by a master device when its transaction (except …\nSets to 1 by a master device when its transaction is …\nRevision ID\nSets to 1 if the SERR# driver is enabled.\nSets to 1 when the device asserts SERR#\nSets to 1 when a target device terminates a transaction …\nSets to 1 if the device can monitor Special Cycle …\nPCI device common config space status register.\nPCI Status\nSubsystem ID\nSubsystem Vendor ID\nSets to 1 if the device does not respond to palette …\nVendor ID\nExpansion ROM base address\nMemory BAR bits type\nReturns the set containing all flags.\nReturns the set containing all flags.\nBase address\nBase port\nReturns the intersection between the two sets of flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nToggles the set of flags.\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nReturns an empty set of flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nConvert from underlying bit representation, preserving all …\nInserts the specified flags in-place.\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGrants I/O memory access\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nReturns <code>true</code> if no flags are currently stored.\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nWhether this bar is prefetchable, allowing the CPU to get …\nReads from port\nReads a value of a specified type at a specified offset.\nRemoves the specified flags in-place.\nRemoves the specified flags in-place.\nInserts or removes the specified flags depending on the …\nInserts or removes the specified flags depending on the …\nSize of the memory\nSize of the port\nReturns the set difference of the two sets of flags.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nReturns the symmetric difference between the flags in <code>self</code> …\nToggles the specified flags in-place.\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nWrites to port\nWrites a value of a specified type at a specified offset.\nBase Address Registers manager.\nPCI common device, Contains a range of information and …\nGain access to the BAR space and return None if that BAR …\nPCI Base Address Register (BAR) manager\nPCI capabilities\nGets the PCI Command\nPCI device ID\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPCI device location\nSets the PCI Command\nGets the PCI status\nPrints formatted arguments to the console.\nThe ID of a CPU in the system.\nThe error type returned when converting an out-of-range …\nA marker trait for guard types that can “pin” the …\nReturns an iterator over all CPUs.\nConverts the CPU ID to an <code>usize</code>.\nReturns the CPU ID of the bootstrap processor (BSP).\nCPU execution context control.\nReturns the ID of the current CPU.\nReturns the ID of the current CPU.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCPU local storage.\nReturns the number of CPUs.\nThis module contains the implementation of the CPU set and …\nSome severe unrecoverable error\n17 – #AC  Alignment check.\n5 – #BR  Bound-range exceeded.\n3 – #BP  Breakpoint (INT3).\n21 – #CP  Control protection exception (CET).\n9 – Coprocessor segment overrun (reserved on modern …\nArchitectural CPU exceptions (x86-64 vectors 0-31).\nAs Osdev Wiki defines(https://wiki.osdev.org/Exceptions): …\n1 – #DB  Debug.\n7 – #NM  Device not available (FPU/MMX/SSE disabled).\n0 – #DE  Divide-by-zero error.\n8 – #DF  Double fault (always pushes an error code of 0).\nCPU faults. Faults can be corrected, and the program may …\nFaults or traps\nThe FPU context of user task.\n13 – #GP  General protection fault\nGeneral registers.\n1 if there is no translation for the linear address using …\n28 – #HV  Hypervisor injection exception.\n1 if the access was an instruction fetch.\nCPU interrupts\n6 – #UD  Invalid or undefined opcode.\n10 – #TS  Invalid TSS.\n18 – #MC  Machine check.\n2 – NMI  Non-maskable interrupt.\n4 – #OF  Overflow.\n0 if no translation for the linear address.\n1 if the access was a data access to a linear address with …\n14 – #PF  Page fault.\nPage Fault error code. Following the Intel Architectures …\n1 if there is no translation for the linear address …\nArchitecture-specific data reported with a page-fault …\nCatch-all for reserved or undefined vector numbers.\nReserved for future use\n1 if the exception is unrelated to paging and resulted …\n1 if the access was a shadow-stack access.\n19 – #XM / #XF  SIMD/FPU floating-point exception.\n30 – #SX  Security exception.\n11 – #NP  Segment not present.\nSelector error code.\n12 – #SS  Stack-segment fault.\nCPU traps. Traps are reported immediately after the …\n1 if the access was a user-mode access.\nUserspace CPU context, including general-purpose registers …\n29 – #VC  VMM communication exception (SEV-ES GHCB).\n20 – #VE  Virtualization exception.\n1 if the access was a write.\n16 – #MF  x87 floating-point exception.\nActivates thread-local storage pointer on the current CPU.\nThe linear (virtual) address that triggered the fault …\nReturns the set containing all flags.\nReturns the FPU context as a byte slice.\nReturns the FPU context as a mutable byte slice.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nSupport for the CPUID instructions.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nThe error code pushed by the CPU for this page fault.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nGets the value of fsbase\nReturns a reference to the general registers.\nReturns a mutable reference to the general registers\nGets the value of gsbase\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nReturns whether this exception type is a fault or a trap.\nLoads CPU’s FPU context from this instance.\nCreates a new FPU context.\nReturns the complement of this set of flags.\nGets the value of r10\nGets the value of r11\nGets the value of r12\nGets the value of r13\nGets the value of r14\nGets the value of r15\nGets the value of r8\nGets the value of r9\nGets the value of rax\nGets the value of rbp\nGets the value of rbx\nGets the value of rcx\nGets the value of rdi\nGets the value of rdx\nRemoves the specified flags in-place.\nGets the value of rflags\nGets the value of rip\nGets the value of rsi\nGets the value of rsp\nSaves CPU’s current FPU context to this instance.\nInserts or removes the specified flags depending on the …\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets the value of field\nSets thread-local storage pointer.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nTakes the CPU exception out.\nGets thread-local storage pointer.\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nProcessor Power Management and RAS Capabilities …\nInfo about cache Associativity.\nThis table is taken from Intel manual (Section CPUID …\nDescribes any kind of cache (TLB, Data and Instruction …\nIterates over cache information (LEAF=0x02).\nWhat type of cache are we dealing with?\nInformation about an individual cache in the hierarchy.\nIterator over caches (LEAF=0x04).\nInfo about a what a given cache caches (instructions, …\nThe main type used to query information about the CPU we’…\nLow-level data-structure to store result of cpuid …\nDeterministic Address Translation Structure\nDeterministic Address Translation Structure Iterator …\nDeterministic Address Translation cache type (EDX bits 04 …\nData cache\nDirect cache access info (LEAF=0x09).\nEBX:EAX and EDX:ECX provide information on the Enclave …\nStructured Extended Feature Identifiers (LEAF=0x07).\nExtended Processor and Processor Feature Identifiers …\nWhere the extended register state is stored.\nWhat kidn of extended register state this is.\nExtendedState subleaf structure for things that need to be …\nInformation for saving/restoring extended register state …\nYields ExtendedState structs.\nInformation about topology (LEAF=0x0B).\nGives information about the current level in the topology.\nProcessor and Processor Feature Identifiers (LEAF=0x01).\nIdentifies the different Hypervisor products.\nInformation about Hypervisor (LEAF=0x4000_0001)\nInstruction cache\nL1 Cache and TLB Information (LEAF=0x8000_0005).\nL2/L3 Cache and TLB Information (LEAF=0x8000_0006).\nL2 Cache Allocation Technology Enumeration Sub-leaf …\nL3 Cache Allocation Technology Enumeration Sub-leaf …\nInformation about L3 cache monitoring.\nMemory Bandwidth Allocation Enumeration Sub-leaf …\nEncrypted Memory Capabilities (LEAF=0x8000_001F).\nInformation about how monitor/mwait works on this CPU …\nNull - No more caches\nNull (indicates this sub-leaf is not valid).\nInfo about performance monitoring – how many counters …\nPerformance Optimization Identifier (LEAF=0x8000_001A).\nProcessor name (LEAF=0x8000_0002..=0x8000_0004).\nProcessor Capacity Parameters and Extended Feature …\nProcessor Frequency Information (LEAF=0x16).\nProcessor Serial Number (LEAF=0x3).\nProcessor Topology Information (LEAF=0x8000_001E).\nIntel Processor Trace Information (LEAF=0x14).\nQEMU is the hypervisor identity when QEMU is used without …\nQuality of service enforcement information (LEAF=0x10).\nIntel Resource Director Technology RDT (LEAF=0x0F).\n4-31 = Reserved\nHyper-thread (Simultaneous multithreading)\nIntel SGX Capability Enumeration Leaf (LEAF=0x12).\nIntel SGX EPC Enumeration Leaf\nIterator over the SGX sub-leafs (ECX &gt;= 2).\nIterator for SoC vendor attributes.\nA vendor brand string as queried from the cpuid leaf.\nSoC vendor specific information (LEAF=0x17).\nInformation about the SVM features that the processory …\nQuery information about thermal and power management …\nTLB 1-GiB Pages Information (LEAF=0x8000_0019).\nWhat type of core we have at this level in the topology …\nTime Stamp Counter/Core Crystal Clock Information …\nData and Instruction cache\nSome unified TLBs will allow a single TLB entry to satisfy …\nVendor Info String (LEAF=0x0)\n(Virtual) Bus (local apic timer) frequency in kHz.\nAPIC ID size.\nReturn the processor brand string as a rust string.\nReturn vendor identification as human readable string.\nReturn the SocVendorBrand as a string.\nWays of associativity (Bits 31-22)\nVersion Information: Family\nVersion Information: Model\nReturns brand ID on AMD.\nBrand Index\nBus (Reference) Frequency (in MHz).\nC-bit location in page table entry\nTranslation cache level (starts at 1)\nTranslation cache type field.\nCache Type\nLength of the capacity bit mask.\nLength of the capacity bit mask.\nCLFLUSH line size (Value ∗ 8 = cache line size in bytes)\nSystem Coherency Line Size (Bits 11-00)\nNumber of configurable Address Ranges for filtering (Bits …\nConversion factor from reported IA32_QM_CTR value to …\nCore ID\nBit width of general-purpose, performance monitoring …\nSpecifies the ratio of the compute unit power accumulator …\nMacro which queries cpuid directly.\nL1 data cache associativity.\nL1 data cache line size in bytes.\nL1 data cache lines per tag.\nL1 data cache size in KB\nAn unsigned integer which is the denominator of the …\nDescription of the cache (from Intel Manual)\nData TLB associativity for 2-MB and 4-MB pages.\nL2 Data TLB associativity for 2-MB and 4-MB pages.\nData TLB number of entries for 2-MB and 4-MB pages.\nL2 Data TLB number of entries for 2-MB and 4-MB pages.\nData TLB associativity for 4K pages.\nL2 Data TLB associativity for 4K pages.\nData TLB number of entries for 4K pages.\nL2 Data TLB number of entries for 4K pages.\nL1 Data TLB associativity for 1-GB pages.\nL1 Data TLB number of entries for 1-GB pages.\nL2 Data TLB associativity for 1-GB pages.\nL2 Data TLB number of entries for 1-GB pages.\nNumber of Interrupt Thresholds in Digital Thermal Sensor\nReturn value EAX register\nReturn value EBX register\nLength of EBX bit vector to enumerate architectural …\nReturn value ECX register\nReturn value EDX register\nVersion Information: Extended Family\nVersion Information: Extended Model\nExtended Processor Signature.\nEnumeration of Monitor-Mwait extensions (beyond EAX and …\nNumber of fixed-function performance counters (if Version …\nBit width of fixed-function performance counters (if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdvanced Power Management Information (LEAF=0x8000_0007).\nQuery basic information about caches (LEAF=0x02).\nRetrieve more elaborate information about caches …\nValue of bits [31:0] of IA32_PLATFORM_DCA_CAP MSR (address …\nQuery deterministic address translation feature …\nDirect cache access info (LEAF=0x09).\nFind out about more features supported by this CPU …\nExtended Processor and Processor Feature Identifiers …\nInformation for saving/restoring extended register state …\nInformation about topology (LEAF=0x0B).\nExtended information about topology (LEAF=0x1F).\nQuery a set of features that are available on this CPU …\nReturns information provided by the hypervisor, if running …\nL1 Instruction Cache Information (LEAF=0x8000_0005)\nL2/L3 Cache and TLB Information (LEAF=0x8000_0006).\nInformations about memory encryption support …\nInformation about how monitor/mwait works on this CPU …\nInfo about performance monitoring (LEAF=0x0A).\nInformations about performance optimization …\nRetrieve processor brand string (LEAF=0x8000_000{2..4}).\nProcessor Capacity Parameters and Extended Feature …\nProcessor Frequency Information (LEAF=0x16).\nRetrieve serial number of processor (LEAF=0x03).\nInformations about processor topology (LEAF=0x8000_001E)\nIntel Processor Trace Enumeration Information (LEAF=0x14).\nQuality of service enforcement information (LEAF=0x10).\nQuality of service monitoring information (LEAF=0x0F).\nInformation about secure enclave support (LEAF=0x12).\nContains SoC vendor specific information (LEAF=0x17).\nThis function provides information about the SVM features …\nQuery information about thermal and power management …\nTLB 1-GiB Pages Information (LEAF=0x8000_0019)\nTime Stamp Counter/Core Crystal Clock Information …\nReturn information about the vendor (LEAF=0x00).\nGuest Physical Address Bits\nHas 100 MHz multiplier Control?\n1GB page size entries supported by this structure\nIs there support for 1GiB pages.\n2MB page size entries supported by this structure\n3DNow extensions.\n4K page size entries supported by this structure\n4MB page size entries supported by this structure\nCheck support for 64-bit mode.\nSEV guest execution only allowed from a 64-bit host if set.\nThermal Monitor and Software Controlled Clock Facilities. …\nBreakpoint Addressing masking extended to bit 31.\nSupports ADX.\nA value of 1 indicates that the processor supports the …\nLOCK MOV CR0 means MOV CR8. See “MOV(CRn)” in APM3.\nAlternate Injection supported if set.\n3DNow AMD extensions.\nAnyThread deprecation\nAPIC On-Chip. The processor contains an Advanced …\nARAT. APIC-Timer-always-running feature is supported if …\nAVX512VBMI2\nSupport for the AMD advanced virtual interrupt controller …\nA value of 1 indicates the processor supports the AVX …\nAVX2\nAVX512_IFMA\nAVX512BITALG\nAVX512BW\nAVX512CD\nSupports AVX512DQ.\nAVX512ER\nSupports AVX512F.\nAVX512PF\nAVX512VL\nAVX512VNNI\nAVX512VPOPCNTDQ\nBMI1\nBMI2\nSupports CET shadow stack features. Processors that set …\nCLZERO instruction supported if set.\nCLFLUSH Instruction. CLFLUSH Instruction is supported.\nSupports CLFLUSHOPT.\nCLWB\nConditional Move Instructions. The conditional move …\nCheck support legacy cmp.\nCMPXCHG16B Available. A value of 1 indicates that the …\nCMPXCHG8B Instruction. The compare-and-exchange 8 bytes …\nL1 Context ID. A value of 1 indicates the L1 data cache …\nIs Code and Data Prioritization Technology supported?\nComplex Cache Indexing (Bit 2) False: Direct mapped cache. …\nIf true, Indicates support of Configurable PSB and …\nHas Core performance boost?\nCPL Qualified Debug Store. A value of 1 indicates the …\nData access breakpoint extension.\nA value of 1 indicates the processor supports the ability …\nDebugging Extensions. Support for I/O breakpoints, …\nFull debug state swap supported for SEV-ES guests.\nIndicates support for the decode assists if set.\nDebug Store. The processor supports the ability to write …\n64-bit DS Area. A value of 1 indicates the processor …\nDigital temperature sensor is supported if set.\nECMD. Clock modulation duty cycle extension is supported …\nEnhanced Intel SpeedStep® technology. A value of 1 …\nSupports ENCLS instruction leaves ETRACKC, ERDINFO, ELDBC, …\nSupports ENCLV instruction leaves EINCVIRTCHILD, …\nThe processor supports performance-energy bias preference …\nIs there support for execute disable bit.\nExtended APIC space.\nA value of 1 indicates that processor supports 16-bit …\nFXSAVE and FXRSTOR instruction optimizations.\nFDP_EXCPTN_ONLY. x87 FPU Data Pointer updated only on x87 …\nIndicates support for processor feedback interface.\nFlexible HWP is supported if set.\nIndicates that TLB flush events, including CR3 writes and …\nA value of 1 indicates the processor supports FMA …\nFour-operand FMA instruction support.\nThe internal FP/SIMD execution datapath is 128 bits wide …\nThe internal FP/SIMD execution datapath is 256 bits wide …\nFloating Point Unit On-Chip. The processor contains an x87 …\nDeprecates FPU CS and FPU DS values if 1.\nFrequency ID control.\nFSGSBASE. Supports RDFSBASE/RDGSBASE/WRFSBASE/WRGSBASE if …\nFXSAVE and FXRSTOR Instructions. The FXSAVE and FXRSTOR …\nGFNI\nGIF – virtualized global interrupt flag if set.\nGuest Mode Execution Trap supported if set.\nHDC. HDC base registers IA32_PKG_HDC_CTL, IA32_PM_CTL1, …\nHLE\nWhen host <code>CR4.MCE=1</code> and guest <code>CR4.MCE=0</code>, machine check …\nMax APIC IDs reserved field is Valid. A value of 0 for HTT …\nHardware Coordination Feedback Capability\nHardware cache coherency across encryption domains …\nHas Hardware P-state control?\nHas Hardware assert supported?\nHWP. HWP base registers (IA32_PM_ENABLE[bit 0], …\nHWP Activity Window. IA32_HWP_REQUEST[bits 41:32] is …\nHWP Capabilities. Highest Performance change is supported …\nHWP Energy Performance Preference. IA32_HWP_REQUEST[bits …\nFast access mode for the IA32_HWP_REQUEST MSR is supported …\nHWP Notification. IA32_HWP_INTERRUPT MSR is supported if …\nHWP Package Level Request. IA32_HWP_REQUEST_PKG MSR is …\nHWP PECI override is supported if set.\nA value of 1 indicates the indicates the presence of a …\nInstruction based sampling.\nIgnoring Idle Logical Processor HWP request is supported …\nInstruction Retired Counter MSR available if set.\nWBINVD/WBNOINVD are interruptible if set.\nIs Invariant TSC available?\nINVLPGB and TLBSYNC instruction supported if set.\nINVLPGB support for invalidating guest nested translations …\nINVPCID. If 1, supports INVPCID instruction for system …\nIf true, Indicates support of IP Filtering, TraceStop …\nSupports L2 Cache Allocation.\nSupports L3 Cache Allocation.\nSupports L3 Cache Intel RDT Monitoring.\nSupports 57-bit linear addresses and five-level paging if …\nIs LAHF/SAHF available in 64-bit mode?\nIndicates support for LBR Virtualization.\nReports whether the response of the delay values is linear.\nIf true, Generated packets which contain IP payloads have …\nSupports local bandwidth monitoring.\nLightweight profiling support\nIs LZCNT available?\nMachine Check Architecture. A value of 1 indicates the …\nIs MCA overflow recovery available?\nMachine Check Exception. Exception 18 is defined for …\nMCOMMIT instruction supported if set.\nSupports Memory Bandwidth Allocation.\nMisaligned SSE mode. See “Misaligned Access Support …\nIntel MMX Technology. The processor supports the Intel MMX …\nAMD extensions to MMX instructions.\nMONITOR/MWAIT. A value of 1 indicates the processor …\nSupport for MWAITX and MONITORX instructions.\nA value of 1 indicates that the processor supports MOVBE …\nMOVU (Move Unaligned) SSE instructions are efficient more …\nMPX. Supports Intel Memory Protection Extensions if 1.\nModel Specific Registers RDMSR and WRMSR Instructions. The …\nIf true, Indicates support of MTC timing packet and …\nMemory Type Range Registers. MTRRs are supported. The …\nNB performance counter extensions support.\nNested paging supported if set.\nIndicates support for NRIP save on #VMEXIT if set.\nSupports occupancy monitoring.\nOS has set CR4.PKE to enable protection keys (and the …\nIndicates OS-visible workaround support\nA value of 1 indicates that the OS has enabled …\nPhysical Address Extension. Physical addresses greater …\nThe Page Flush MSR is available if set.\nPage Attribute Table. Page Attribute Table is supported. …\nIndicates support for the pause intercept filter if set.\nIndicates support for the PAUSE filter cycle count …\nPending Break Enable. The processor supports the use of …\nProcess-context identifiers. A value of 1 indicates that …\nPCLMULQDQ. A value of 1 indicates the processor supports …\nPerfmon and Debug Capability: A value of 1 indicates the …\nProcessor performance counter extensions support.\nSupport for L3 performance counter extension.\nPerformance time-stamp counter.\nPage Global Bit. The global bit is supported in …\nSupports protection keys for user-mode pages.\nPLN. Power limit notification controls are supported if …\nA value of 1 indicates that the processor supports the …\nSupport of Power Event Trace. Writes can set IA32_RTIT_CTL…\nHas Processor power reporting interface?\nIs PREFETCHW available?\nHas PREFETCHWT1 (Intel® Xeon Phi™ only).\nDisallowing IBS use by the host supported if set.\nSupports Intel Processor Trace.\nPage Size Extension. Large pages of size 4 MByte are …\n36-Bit Page Size Extension. 4-MByte pages addressing …\nProcessor Serial Number. The processor supports the 96-bit …\nPTM. Package thermal management is supported if set.\nIndicates support of PTWRITE. Writes can set IA32_RTIT_CTL…\nRDPID and IA32_TSC_AUX are available.\nRDPRU instruction supported if set.\nA value of 1 indicates that processor supports RDRAND …\nSupports RDSEED.\nSupports Intel Resource Director Technology (RDT) …\nSupports Intel Resource Director Technology (RDT) …\nCheck support for rdtscp instruction.\nSupports Enhanced REP MOVSB/STOSB if 1.\nFP Error Pointers Restored by XRSTOR if set.\nRestricted Injection supported if set.\nHas Read-only effective frequency interface?\nIf true, Indicates that IA32_RTIT_CTL.CR3Filter can be set …\nRTM\nSecure Encrypted Virtualization is supported if set.\nSEV Encrypted State is supported if set.\nSEV Secure Nested Paging supported if set.\nSupports Intel® Software Guard Extensions (Intel® SGX …\nHas SGX1 support.\nHas SGX2 support.\nSupports SGX Launch Configuration.\nSupports SHA Instructions.\nIf true, Indicates support of Single-Range Output scheme.\nSKINIT and STGI are supported.\nSMAP. Supports Supervisor-Mode Access Prevention (and the …\nSecure Memory Encryption is supported if set.\nSMEP. Supports Supervisor-Mode Execution Prevention if 1.\nSafer Mode Extensions. A value of 1 indicates that the …\nSPEC_CTRL virtualization supported if set.\nSelf Snoop. The processor supports the management of …\nSSE. The processor supports the SSE extensions.\nSSE2. The processor supports the SSE2 extensions.\nStreaming SIMD Extensions 3 (SSE3). A value of 1 indicates …\nA value of 1 indicates that the processor supports SSE4.1.\nA value of 1 indicates that the processor supports SSE4.2.\nXTRQ, INSERTQ, MOVNTSS, and MOVNTSD instruction support.\nSVM supervisor shadow stack restrictions if set.\nA value of 1 indicates the presence of the Supplemental …\nHas Software uncorrectable error containment and recovery …\nSecure virtual machine supported.\nIndicates support for SVM-Lock if set.\nAre fast system calls available.\nSYSENTER and SYSEXIT Instructions. The SYSENTER and …\nTrailing bit manipulation instruction support.\nHas THERMTRIP?\nSupport for INVLPGB/TLBSYNC hypervisor enable in VMCB and …\nThermal Monitor. The processor implements the thermal …\nHardware thermal control (HTC)?\nThermal Monitor 2. A value of 1 indicates whether the …\nIndicates the following MSRs are supported: …\nIf true, Tracing can be enabled with IA32_RTIT_CTL.ToPA = …\nIf true, ToPA tables can hold any number of output …\nTopology extensions support.\nSupports total bandwidth monitoring.\nIf true, Indicates support of output to Trace Transport …\nIs Temperature Sensor available?\nTime Stamp Counter. The RDTSC instruction is supported, …\nIA32_TSC_ADJUST MSR is supported if 1.\nA value of 1 indicates that the processors local APIC …\nIndicates support for MSR TSC ratio (MSR <code>0xC000_0104</code>) if …\nIntel Turbo Boost Technology Available (see description of …\nIntel® Turbo Boost Max Technology 3.0 available.\nSupports user-mode instruction prevention if 1.\nEFER.LMSLE is unsupported if set.\nVAES\nIndicates support for VMCB clean bits if set.\nVirtual 8086 Mode Enhancements. Virtual 8086 mode …\nVM Permission Levels supported if set.\nVMSAVE and VMLOAD virtualization supported if set.\nVirtual Machine Extensions. A value of 1 indicates that …\nVoltage ID control.\nVPCLMULQDQ\nVirtual Transparent Encryption supported if set.\nWAITPKG\nWBNOINVD instruction supported if set.\nWatchdog timer support.\nA value of 1 indicates that the processor supports x2APIC …\nSupports XGETBV with ECX = 1 if set.\nExtended operation support.\nA value of 1 indicates that the processor supports the …\nSupports XSAVEC and the compacted form of XRSTOR if set.\nCPU has xsaveopt feature.\nSupports XSAVES/XRSTORS and IA32_XSS if set.\nHighest COS number supported for this Leaf.\nHighest COS number supported for this Leaf.\nHighest COS number supported for this Leaf.\nSupport for HDC in IA32_XSS.\nSupport for PT in IA32_XSS.\nL1 instruction cache associativity.\nL1 instruction cache line size in bytes.\nL1 instruction cache lines per tag.\nL1 instruction cache size in KB\nReturns the identity of the <code>Hypervisor</code>.\nInitial APIC ID\nSupports treating interrupts as break-event for MWAIT, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum page count for INVLPGB instruction.\nBranch instruction retired event not available if 1.\nBranch mispredict retired event not available if 1.\nLast-level cache reference event not available if 1.\nReturns true when the compacted format of an XSAVE area is …\nCore cycle event not available if 1.\nFully associative structure\nFully Associative cache\nTrue if the bit n (corresponding to the sub-leaf index) is …\nTrue if bit n is supported in XCR0.\nCache Inclusiveness (Bit 1) False: Cache is not inclusive …\nInstruction retired event not available if 1.\nLast-level cache misses event not available if 1.\nReference cycles event not available if 1.\nSelf Initializing cache level (does not need SW …\nWrite-Back Invalidate/Invalidate (Bit 0) False: …\nBit-granular map of isolation/contention of allocation …\nBit-granular map of isolation/contention of allocation …\nIterator over extended state enumeration levels &gt;= 2.\nIterator over SGX sub-leafs.\nInstruction TLB associativity for 2-MB and 4-MB pages.\nL2 Instruction TLB associativity for 2-MB and 4-MB pages.\nInstruction TLB number of entries for 2-MB and 4-MB pages.\nL2 Instruction TLB number of entries for 2-MB and 4-MB …\nInstruction TLB associativity for 4K pages.\nL2 Instruction TLB associativity for 4K pages.\nInstruction TLB number of entries for 4K pages.\nL2 Instruction TLB number of entries for 4K pages.\nL1 Instruction TLB associativity for 1-GB pages.\nL1 Instruction TLB number of entries for 1-GB pages.\nL2 Instruction TLB associativity for 1-GB pages.\nL2 Instruction TLB number of entries for 1-GB pages.\nL2 Cache Allocation Information.\nL2 Associativity field\nL2 Cache Line size in bytes\nL2 cache lines per tag.\nCache size in KB.\nL3 Cache Allocation Information.\nL3 Cache Monitoring.\nL2 Associativity field\nL2 Cache Line size in bytes\nL2 cache lines per tag.\nSpecifies the L3 cache size range\nLargest monitor-line size in bytes (default is processor’…\nCache Level (starts at 1)\nLevel number.\nLinear Address Bits\nThe value of MAWAU used by the BNDLDX and BNDSTX …\nMaximum number of addressable IDs for logical processors …\nMaximum number of addressable IDs for logical processors …\nMaximum number of addressable IDs for processor cores in …\nThe maximum supported enclave size in 64-bit mode is …\nThe maximum supported enclave size in non-64-bit mode is …\nNumber of encrypted guests supported simultaneouslys\nReports the maximum MBA throttling value supported for the …\nMaximum number of addressable IDs for logical processors …\nThe maximum ECX value recognized by RDPRU.\nThe size of the <code>apic_id_size</code> field determines the maximum …\nMaximum range (zero-based) of RMID of L3.\nMemory Bandwidth Allocation Information.\nMinimum ASID value for an SEV enabled, SEV-ES disabled …\nBit vector of supported extended SGX features.\nUses Rust’s <code>cpuid</code> function from the <code>arch</code> module.\nReturn new CpuId struct.\nIterate over all cache information.\nIterate over all cache info subleafs for this CPU.\nIterate over each sub-leaf with an address translation …\nIterate over all SoC vendor specific attributes.\nNode ID\nNodes per processor\nAn unsigned integer which is the nominal frequency of the …\nNumber as retrieved from cpuid\nNumber of physical threads in the processor.\nNumber of general-purpose performance monitoring counter …\nAn unsigned integer which is the numerator of the …\nThe offset in bytes of this extended state components save …\nPartitioning (0: Soft partitioning between the logical …\nPerformance time-stamp counter size (in bits).\nPhysical Address Bits\nPhysical Address bit reduction\nThe physical address of the base of the EPC section\nPhysical Line partitions (Bits 21-12)\nReturns package type on AMD.\nProcessor Base Frequency (in MHz).\nMaximum Frequency (in MHz).\nNumber of logical processors at this level type. The …\nReturns which register this specific extended subleaf …\nSVM revision number.\nMaximum range (zero-based) of RMID within this physical …\nReports the valid bits of SECS.ATTRIBUTES[127:0] that …\nCombination of bits 00-31 and 32-63 of 96 bit processor …\n96 bit processor serial number.\nBits 00-31 of 96 bit processor serial number.\nBits 32-63 of 96 bit processor serial number.\nBits 64-96 of 96 bit processor serial number.\nNumber of Sets.\nNumber of Sets (Bits 31-00)\nNumber of bits to shift right on x2APIC ID to get a unique …\nThe size in bytes (from the offset specified in EBX) of …\nSize of the corresponding EPC section within the Processor …\nSmallest monitor-line size in bytes (default is processor…\nVersion Information: Stepping ID\nNumber of available address space identifiers (ASID).\nNumber of C0 sub C-states supported using MWAIT (Bits 03 - …\nNumber of C1 sub C-states supported using MWAIT (Bits 07 - …\nNumber of C2 sub C-states supported using MWAIT (Bits 11 - …\nNumber of C3 sub C-states supported using MWAIT (Bits 15 - …\nNumber of C4 sub C-states supported using MWAIT (Bits 19 - …\nNumber of C5 sub C-states supported using MWAIT (Bits 23 - …\nNumber of C6 sub C-states supported using MWAIT (Bits 27 - …\nNumber of C7 sub C-states supported using MWAIT (Bits 31 - …\nBitmap of supported Cycle Threshold value encodings (Bits …\nBitmap of supported MTC period encodings (Bit 31:16).\nBitmap of supported Configurable PSB frequency encodings …\nThreads per core\n“TSC frequency” = “core crystal clock frequency” * …\nTSC frequency in kHz.\nCache type\nVersion ID of architectural performance monitoring. (Bits …\nWays of associativity.\nReturn new CpuId struct with custom reader function.\nx2APIC ID\nx2APIC ID the current logical processor. (Bits 31-00)\nSupport for AVX512 OPMASK in XCR0.\nSupport for AVX512 ZMM Hi16 in XCR0.\nSupport for AVX512 ZMM Hi256 XCR0.\nSupport for AVX 256-bit in XCR0.\nSupport for legacy x87 in XCR0.\nSupport for MPX BNDCSR in XCR0.\nSupport for MPX BNDREGS in XCR0.\nSupport for PKRU in XCR0.\nSupport for SSE 128-bit in XCR0.\nMaximum size (bytes, from the beginning of the …\nMaximum size (bytes, from the beginning of the …\nThe size in bytes of the XSAVE area containing all states …\nA trait to abstract any type that can be used as a slot …\nA CPU-local variable for type <code>T</code>, backed by a storage of …\nInner mutable CPU-local objects.\nA guard for accessing the CPU-local object.\nManages dynamically-allocated CPU-local chunks.\nDynamically-allocated CPU-local objects.\nStatically-allocated CPU-local objects.\nAdds a value to the per-CPU object in a single instruction.\nAllocates a CPU-local object from the chunk, and …\nGets access to the underlying value through a raw pointer.\nBitwise ANDs a value to the per-CPU object in a single …\nBitwise ORs a value to the per-CPU object in a single …\nBitwise XORs a value to the per-CPU object in a single …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the <code>mut</code> pointer for the object on a target CPU.\nGets access to the CPU-local value on a specific CPU.\nGets the <code>const</code> pointer for the object on the current CPU.\nGets the <code>const</code> pointer for the object on a target CPU.\nGets access to the underlying value on the current CPU …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether the chunk is empty.\nChecks whether the chunk is full.\nGets the value of the per-CPU object in a single …\nCreates a new dynamically-allocated CPU-local chunk.\nWrites a value to the per-CPU object in a single …\nSubtracts a value to the per-CPU object in a single …\nAttempts to deallocate a previously allocated CPU-local …\nA subset of all CPUs in the system with atomic operations.\nA subset of all CPUs in the system.\nAdds a CPU to the set.\nAtomically adds a CPU with the given ordering.\nAdds all CPUs to the set.\nRemoves all CPUs from the set.\nReturns true if the set contains the specified CPU.\nAtomically checks if the set contains the specified CPU.\nReturns the number of CPUs in the set.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the set is empty.\nReturns true if the set is full.\nIterates over the CPUs in the set.\nLoads the value of the set with the given ordering.\nCreates a new <code>AtomicCpuSet</code> with an initial value.\nCreates a new <code>CpuSet</code> with no CPUs in the system.\nCreates a new <code>CpuSet</code> with all CPUs in the system.\nRemoves a CPU from the set.\nAtomically removes a CPU with the given ordering.\nStores a new value to the set with the given ordering.\nI/O memory.\nAn I/O port, representing a specific address in the I/O …\nAcquires an <code>IoMem</code> instance for the given range.\nAcquires an <code>IoPort</code> instance for the given range.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the length of the I/O memory region.\nCreate an I/O port.\nReturns the physical address of the I/O memory.\nReturns the port number.\nReads from the I/O port\nReturns the size of the I/O port.\nSlices the <code>IoMem</code>, returning another <code>IoMem</code> representing the …\nWrites to the I/O port\nInjects a logger as the global logger backend.\nHas the memory page been read or written.\nThe first bit available for software use.\nThe second bit available for software use.\nData flows both from and to the device\nA type to control the cacheability of the main memory.\nHas the memory page been written.\nThe device address.\nA coherent (or consistent) DMA mapping, which guarantees …\n<code>DmaDirection</code> limits the data flow direction of <code>DmaStream</code> …\nA streaming DMA mapping. Users must synchronize data …\nA slice of streaming DMA mapping.\nData flows from the device\nA trait for types that have mapped address in the device …\nGets physical address trait\nThe kernel address space.\nThe maximum virtual address of user space (non inclusive).\nThe page size\nPhysical addresses.\nPage protection permissions and access status.\nThe property of a mapped virtual memory page.\nThe level of a page table node or a frame.\nReadable.\nReadable + writable.\nReadable + writable + executable.\nReadable + executable.\nData flows to the device\nUncacheable (UC).\nVirtual addresses.\nWritable.\nWrite-Combining (WC).\nWrite-Protect (WP).\nWriteback (WB).\nWritethrough (WT).\nExecutable.\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nThe cache policy for the page.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nGets the base address of the mapping in the device address …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns the DMA direction.\nReturns an empty set of flags.\nThe flags associated with the page,\nFrame (physical memory page) management.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nManages the kernel heap using slab or buddy allocation …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAbstractions for reading and writing virtual memory (VM) …\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nChecks if the given address is page-aligned.\nCreates a coherent DMA mapping backed by <code>segment</code>.\nEstablishes DMA stream mapping for a given <code>USegment</code>.\nReturns the number of bytes in the DMA mapping.\nReturns the number of bytes.\nReturns the number of bytes.\nConstructs a <code>DmaStreamSlice</code> from the <code>DmaStream</code>.\nCreates a page property that implies an invalid page …\nCreates a new <code>PageProperty</code> with the given flags and cache …\nReturns the number of frames.\nReturns the complement of this set of flags.\nReturns the offset of the slice.\nReturns the physical address.\nReads data into the buffer.\nReturns a reader to read data from it.\nReturns a reader to read data from it.\nReturns a reader to read data from it.\nRemoves the specified flags in-place.\nGets the underlying <code>USegment</code>.\nInserts or removes the specified flags depending on the …\nReturns the underlying <code>DmaStream</code>.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nSynchronizes the streaming DMA mapping with the device.\nSynchronizes the slice of streaming DMA mapping with the …\nTLB flush operations.\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nVirtual memory space management.\nWrites data from the buffer.\nReturns a writer to write data into it.\nReturns a writer to write data into it.\nReturns a writer to write data into it.\nA smart pointer to a frame.\nA struct that can work as <code>&amp;&#39;a Frame&lt;M&gt;</code>.\nThe physical memory allocator.\nBorrows a reference from the given frame.\nGets the dyncamically-typed metadata of this frame.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a dynamically typed <code>Frame</code> from a raw, in-use page.\nGets a <code>Frame</code> with a specific usage from a raw, unused page.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnabling linked lists of frames without heap allocation.\nGets the map level of this page.\nMetadata management of frames.\nGets the metadata of this page.\nGets the reference count of the frame.\nA contiguous range of frames.\nGets the size of this page in bytes.\nGets the physical address of the start of the frame.\nTries converting a <code>Frame&lt;dyn AnyFrameMeta&gt;</code> into the …\nThe unique frame pointer that is not shared with others.\nUntyped physical memory management.\nOptions for allocating physical memory frames.\nThe trait for the global frame allocator.\nAdds a contiguous range of frames to the allocator.\nAllocates a contiguous range of frames.\nAllocates a single untyped frame without metadata.\nAllocates a single frame with additional metadata.\nAllocates a contiguous range of untyped frames without …\nAllocates a contiguous range of frames with additional …\nDeallocates a contiguous range of frames.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates new options for allocating the specified number of …\nSets whether the allocated frames should be initialized …\nA cursor that can mutate the linked list links.\nThe metadata of linked list frames.\nA linked list of frames.\nProvides a reference to the linked list.\nTells if a frame is in the list.\nGets the mutable reference to the current frame’s …\nGets a cursor at the back that can mutate the linked list …\nGets a cursor at the front that can mutate the linked list …\nGets a cursor at the specified frame if the frame is in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInserts a frame before the current frame.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTells if the linked list is empty.\nMoves the cursor to the next frame towards the back.\nMoves the cursor to the previous frame towards the front.\nCreates a new linked list.\nCreates a new linked list metadata.\nPops a frame from the back of the linked list.\nPops a frame from the front of the linked list.\nPushes a frame to the back of the linked list.\nPushes a frame to the front of the linked list.\nGets the number of frames in the linked list.\nTakes the current pointing frame out of the linked list.\nAll frame metadata types must implement this trait.\nThe frame is being initialized or destructed.\nThe maximum alignment in bytes of the metadata of a frame.\nThe maximum number of bytes of the metadata of a frame.\nThe error type for getting the frame from a physical …\nThe frame is in use.\nThe metadata of physical pages that contains the kernel …\nThe metadata of frames that holds metadata of frames.\nThe provided physical address is not aligned.\nThe provided physical address is out of bound.\nReserved memory metadata. Maybe later used as I/O memory.\nThe frame is private to an owner of <code>UniqueFrame</code>.\nUnusable memory metadata. Cannot be used for any purposes.\nThe frame is not in use.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMakes a structure usable as a frame metadata.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the metadata’s associated frame is untyped.\nCalled when the last handle to the frame is dropped.\nA contiguous range of homogeneous physical memory frames.\nA contiguous range of homogeneous untyped physical memory …\nGets the end physical address of the contiguous frames.\nReturns the argument unchanged.\nCreates a new <code>Segment</code> from unused frames.\nCalls <code>U::from(self)</code>.\nGets the length in bytes of the contiguous frames.\nGets an extra handle to the frames in the byte offset …\nSplits the frames into two at the given byte offset from …\nGets the start physical address of the contiguous frames.\nTry converting a <code>Segment&lt;dyn AnyFrameMeta&gt;</code> into <code>USegment</code>.\nAn owning frame pointer.\nDeallocates a slot to the slab.\nGets the dyncamically-typed metadata of this frame.\nGets the dyncamically-typed metadata of this frame.\nReturns the argument unchanged.\nGets a <code>UniqueFrame</code> with a specific usage from a raw, …\nCalls <code>U::from(self)</code>.\nGets the paging level of this page.\nGets the metadata of this page.\nGets the mutable metadata of this page.\nAllocates a new slab of the given size.\nRepurposes the frame with a new metadata.\nResets the frame to unused without up-calling the …\nGets the size of this page in bytes.\nGets the physical address of the start of the frame.\nTries to get a unique frame from a shared frame.\nThe metadata of untyped frame.\nA smart pointer to an untyped frame with any metadata.\nA physical memory range that is untyped.\nBorrows a reader that can read the untyped memory.\nTries converting a <code>Frame&lt;dyn AnyFrameMeta&gt;</code> into <code>UFrame</code>.\nBorrows a writer that can write the untyped memory.\nThe trait for the global heap allocator.\nA slot that will become or has been turned from a heap …\nThe slot is from a <code>Segment</code>.\nA slab.\nFrame metadata of a slab.\nThe slot is from a <code>super::Slab</code>.\nA singly-linked list of <code>HeapSlot</code>s from <code>super::Slab</code>s.\nThe type and size of the heap slot that should be used for …\nAllocates a <code>HeapSlot</code> according to the layout.\nAllocates a slot from the slab.\nAllocates a large slot.\nGets the pointer to the slot.\nGets the capacity of the slab (regardless of the number of …\nDeallocates a <code>HeapSlot</code>.\nDeallocates a slot to the slab.\nDeallocates a large slot.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the type and size of the slot.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAllocates a new slab of the given size.\nCreates a new empty list.\nGets the number of allocated slots.\nGets the physical address of the slot.\nPops a slot from the front of the list.\nPushes a slot to the front of the list.\nGets the size of the slot.\nGets the size of the slot.\nA marker type used for <code>VmReader</code> and <code>VmWriter</code>, representing …\nFallible memory read from a <code>VmWriter</code>.\nFallible memory write from a <code>VmReader</code>.\nA marker type used for <code>VmReader</code> and <code>VmWriter</code>, representing …\nA marker trait for POD types that can be read or written …\nA trait that enables reading/writing data from/to a VM …\nA trait that enables reading/writing data from/to a VM …\n<code>VmReader</code> is a reader for reading data from a contiguous …\n<code>VmWriter</code> is a writer for writing data to a contiguous …\nReturns the number of bytes for the available space.\nCollects all the remaining bytes into a <code>Vec&lt;u8&gt;</code>.\nReturns the cursor pointer, which refers to the address of …\nReturns the cursor pointer, which refers to the address of …\nFills the available space by repeating <code>value</code>.\nWrites <code>len</code> zeros to the target memory.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>VmReader</code> from a pointer and a length, which …\nConstructs a <code>VmWriter</code> from a pointer and a length, which …\nConstructs a <code>VmReader</code> from a pointer and a length, which …\nConstructs a <code>VmWriter</code> from a pointer and a length, which …\nReturns if it has available space to write.\nReturns if it has remaining data to read.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLimits the length of remaining data.\nLimits the length of available space.\nReads requested data at a specified offset into a given …\nReads all data into the writer until one of the two …\nReads a specified number of bytes at a specified offset …\nReads all data into the writer until one of the three …\nReads a value of the <code>PodOnce</code> type at the specified offset …\nReads a value of the <code>PodOnce</code> type using one non-tearing …\nReads a slice of a specified type at a specified offset.\nReads a value of a specified type at a specified offset.\nReads a value of <code>Pod</code> type.\nReads a value of <code>Pod</code> type.\nReturns the number of bytes for the remaining data.\nSkips the first <code>nbytes</code> bytes of data. The length of …\nSkips the first <code>nbytes</code> bytes of data. The length of …\nConverts to a fallible reader.\nConverts to a fallible writer.\nWrites all data from a given <code>VmReader</code> at a specified …\nWrites all data from the reader until one of the two …\nWrites a specified number of bytes from a given buffer at …\nWrites all data from the reader until one of the three …\nWrites a value of the <code>PodOnce</code> type at the specified offset …\nWrites a value of the <code>PodOnce</code> type using one non-tearing …\nWrites a slice of a specified type at a specified offset.\nWrites a value of a specified type at a specified offset.\nWrites a value of <code>Pod</code> type.\nWrites a value of <code>Pod</code> type.\nWrites a sequence of values given by an iterator (<code>iter</code>) …\nFlush the TLB entry for the specified virtual address.\nFlush all TLB entries except for the global entries.\nFlush the TLB entries for the specified virtual address …\nThe operation to flush TLB entries.\nA TLB flusher that is aware of which CPUs are needed to be …\nDispatches all the pending TLB flush requests.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIssues a pending TLB flush request.\nIssues a TLB flush request that must happen before …\nCreates a new TLB flusher with the specified CPUs to be …\nPerforms the TLB flush operation on the current CPU.\nWaits for all the previous TLB flush requests to be …\nThe cursor for querying over the VM space without …\nThe cursor for modifying the mappings in VM space.\nThe item that can be mapped into the <code>VmSpace</code>.\nA virtual address space for user-mode tasks, enabling safe …\nActivates the page table on the current CPU.\nGets an immutable cursor in the virtual address range.\nGets an mutable cursor in the virtual address range.\nMoves the cursor forward to the next mapped virtual …\nMoves the cursor forward to the next mapped virtual …\nGet the dedicated TLB flusher for this cursor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJump to the virtual address.\nJump to the virtual address.\nMap a frame into the current slot.\nCreates a new VM address space.\nApplies the operation to the next slot of mapping within …\nQueries the mapping at the current virtual address.\nQueries the mapping at the current virtual address.\nCreates a reader to read data from the user space of the …\nClears the mapping starting from the current slot, and …\nGet the virtual address of the current slot.\nGet the virtual address of the current slot.\nCreates a writer to write data into the user space.\nThe default panic handler for OSTD based kernels.\nAborts the QEMU\nPrints the stack trace of the current thread to the …\nContains the error value\nContains the success value\nA specialized <code>Result</code> type for this crate.\nPrints to the console.\nPrints to the console with a newline.\nExecutes a function on other processors.\nAn guard that provides exclusive access to the data …\nA guard that provides shared read access to the data …\nA upgradable guard that provides read access to the data …\nA guard that provides exclusive write access to the data …\nA guard that provides shared read access to the data …\nA upgradable guard that provides read access to the data …\nA guard that provides exclusive write access to the data …\nA guard that provides exclusive access to the data …\nThe guard type for holding a spin lock or a spin-based …\nThe Guard can be transferred atomically.\nA guardian that disables IRQs while holding a lock.\nA mutex with waitqueue.\nA guard that provides exclusive access to the data …\nA guardian that disables preemption while holding a lock.\nA Read-Copy Update (RCU) cell for sharing a pointer …\nA wrapper to delay calling destructor of <code>T</code> after the RCU …\nA Read-Copy Update (RCU) cell for sharing a <em>nullable</em> …\nA guard that allows access to the pointed data protected …\nA guard that allows access to the pointed data protected …\nThe guard type for holding a spin-based read lock.\nA reference-counting pointer with read-only capabilities.\nA reference-counting pointer with read-write capabilities.\nSpin-based Read-write Lock\nA guard that provides shared read access to the data …\nA upgradable guard that provides read access to the data …\nA guard that provides exclusive write access to the data …\nA mutex that provides data access to either one writer or …\nA guard that provides shared read access to the data …\nA upgradable guard that provides read access to the data …\nA guard that provides exclusive write access to the data …\nA guardian that denotes the guard behavior for holding a …\nA spin lock.\nA guard that provides exclusive access to the data …\nA wait queue.\nA waiter that can put the current thread to sleep until it …\nA waker that can wake up the associated <code>Waiter</code>.\nA guardian that disables IRQs while holding a write lock.\nClones a <code>RoArc</code> that points to the same allocation.\nTries to replace the already read pointer with a new …\nTries to replace the already read pointer with a new …\nConverts the guard behavior from disabling preemption to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an immutable reference if no other <code>RwArc</code> points to …\nGets the reference of the protected data.\nGets the reference of the protected data.\nReturns the contained value by cloning it.\nReturns a mutable reference to the underlying data.\nReturns a mutable reference to the underlying data.\nReturns a mutable reference to the underlying data.\nReturns a mutable reference to the underlying data.\nCreates a new guard.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the RCU primitive protects nothing when …\nAcquires the mutex.\nAcquires the spin lock.\nAcquires the mutex through an <code>Arc</code>.\nAcquires the spin lock through an <code>Arc</code>.\nCreates a new mutex.\nCreates a new RCU primitive with the given pointer.\nCreates a new RCU primitive with the given pointer.\nCreates a new <code>RwArc&lt;T&gt;</code>.\nCreates a new spin-based read-write lock with an initial …\nCreates a new read-write mutex with an initial value.\nCreates a new spin lock.\nCreates a new, empty wait queue.\nCreates a new <code>RcuDrop</code> instance that delays the dropping of …\nCreates a new RCU primitive that contains nothing.\nCreates a waiter and its associated <code>Waker</code>.\nThis module provides a trait and some auxiliary types to …\nRetrieves a read guard for the RCU primitive.\nRetrieves a read guard for the RCU primitive.\nAcquires the read lock for immutable access.\nAcquires the read lock for immutable access.\nAcquires a read lock and spin-wait until it can be …\nAcquires a read mutex and sleep until it can be acquired.\nAcquires a read lock through an <code>Arc</code>.\nCreates a new read guard.\nReads the RCU-protected value in an atomic mode.\nReads the RCU-protected value in an atomic mode.\nReturns the task that the associated waker will attempt to …\nAtomically transfers the current guard to a new instance.\nTries Acquire the mutex immedidately.\nTries acquiring the spin lock immedidately.\nTries acquire the mutex through an <code>Arc</code>.\nAttempts to acquire a read lock.\nAttempts to acquire a read mutex.\nAttempts to acquire an read lock through an <code>Arc</code>.\nAttempts to acquire an upread lock.\nAttempts to acquire a upread mutex.\nAttempts to acquire an upgradeable read lock through an <code>Arc</code>…\nAttempts to acquire a write lock.\nAttempts to acquire a write mutex.\nReplaces the current pointer with a null pointer.\nReplaces the current pointer with a null pointer.\nAcquires an upreader and spin-wait until it can be …\nAcquires a upread mutex and sleep until it can be acquired.\nAcquires an upgradeable read lock through an <code>Arc</code>.\nWaits until the waiter is woken up by calling …\nWaits until some condition is met.\nWaits until some condition is met or the cancel condition …\nWakes up all waiting threads, returning the number of …\nWakes up one waiting thread, if there is one at the point …\nWakes up the associated <code>Waiter</code>.\nGets the associated <code>Waker</code> of the current waiter.\nAcquires the write lock for mutable access.\nAcquires a write lock and spin-wait until it can be …\nAcquires a write mutex and sleep until it can be acquired.\nAcquires a write lock through an <code>Arc</code>.\nThe power of two of the pointer alignment.\nA type that represents <code>&amp;&#39;a Arc&lt;T&gt;</code>.\nA type that represents <code>&amp;&#39;a Box&lt;T&gt;</code>.\nA trait that abstracts non-null pointers.\nA type that behaves just like a shared reference to the …\nThe target type that this pointer refers to.\nA type that represents <code>&amp;&#39;a Weak&lt;T&gt;</code>.\nDereferences <code>self</code> to get a reference to <code>T</code> with the …\nDereferences <code>self</code> to get a reference to <code>T</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts back from a raw pointer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts to a raw pointer.\nObtains a shared reference to the original pointer.\nConverts a shared reference to a raw pointer.\nThe current task.\nA guard for disable preempt.\nA task that executes a function to the end.\nTrait for manipulating the task context.\nOptions to create or spawn a new task.\nAtomic Mode\nBuilds a new task without running it immediately.\nReturns a cloned <code>Arc&lt;Task&gt;</code>.\nGets the current task.\nSets the data associated with the task.\nReturns the task data.\nDisables preemption.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the function that represents the entry point of the …\nHalts the CPU until interrupts if no preemption is …\nInjects a handler to be executed after scheduling.\nInjects a handler to be executed before scheduling.\nGets instruction pointer\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the local data associated with the task.\nReturns the local data of the current task.\nCreates a set of options for a task.\nKicks the task scheduler to run the task.\nGet the attached scheduling information.\nTask scheduling.\nSets instruction pointer\nSets stack pointer\nSets thread-local storage pointer.\nBuilds a new task and runs it immediately.\nGets stack pointer\nGets thread-local storage pointer.\nSets the user context associated with the task.\nReturns the user context of this task, if it has.\nYields execution so that another task may be scheduled.\nAbstracts any type from which one can obtain a reference …\nA marker trait for guard types that enforce the atomic …\nReturns a guard for the atomic mode.\nMarks a function as one that might sleep.\nPossible triggers of an <code>enqueue</code> action.\nTask exiting.\nA per-CPU, local runqueue.\nA SMP-aware task scheduler.\nSpawn a new task.\nTimer interrupt.\nPossible triggers of an <code>update_current</code> action.\nTask waiting.\nWake a sleeping task.\nTask yielding.\nGets the current runnable task.\nRemoves the current runnable task from runqueue.\nEnqueues a runnable task.\nReturns the argument unchanged.\nReturns the argument unchanged.\nScheduling related information in a task.\nInjects a custom implementation of task scheduler into …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets an immutable access to the local runqueue of the …\nGets a mutable access to the local runqueue of the current …\nPicks the next runnable task.\nTries to pick the next runnable task.\nUpdates the current runnable task’s scheduling …\nAn atomic CPUID container.\nTrait for fetching common scheduling information.\nFields of a task that OSTD will never touch.\nGets the CPU that the task is running on or lately ran on.\nThe CPU that the task would like to be running on.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the inner value of an <code>AtomicCpuId</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the inner value of an <code>AtomicCpuId</code> anyway.\nSets the inner value of an <code>AtomicCpuId</code> if it’s empty.\nSets the inner value of an <code>AtomicCpuId</code> to <code>AtomicCpuId::NONE</code>…\nJiffies is a term used to denote the units of time …\nThe maximum value of <code>Jiffies</code>.\nAdds the given number of jiffies, saturating at …\nGets the <code>Duration</code> calculated from the jiffies counts.\nGets the number of jiffies.\nReturns the elapsed time since the system boots up.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new instance.\nRegister a function that will be executed during the …\nReturns whether we are in the interrupt context.\nIRQ line and IRQ guards.\nRegisters a function to the interrupt bottom half …\nA guard for disabled local IRQs.\nA type alias for the IRQ callback function.\nAn Interrupt ReQuest (IRQ) line.\nAllocates an available IRQ line.\nAllocates a specific IRQ line.\nDisables all IRQs on the current CPU (i.e., locally).\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if there are no registered callbacks.\nGets the IRQ number.\nRegisters a callback that will be invoked when the IRQ is …\nGets the remapping index of the IRQ line.\nA kernel event is pending\nA reason as to why the control of the CPU is returned from …\nThe common interface that every CPU architecture-specific …\nA CPU exception is triggered by the user space.\nCode execution in the user mode.\nA system call is issued by the user space.\nReturns an immutable reference the user-mode CPU context.\nReturns a mutable reference the user-mode CPU context.\nStarts executing in the user mode. Make sure current task …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the instruction pointer\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>UserMode</code>.\nSets the instruction pointer\nSets the stack pointer\nGets the stack pointer\nGets the trap error code of this interrupt.\nGets the trap number of this interrupt.\nA type containing either a <code>Left</code> value <code>L</code> or a <code>Right</code> value <code>R</code>.\nContains the left value\nContains the right value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if the left value is present.\nReturns true if the right value is present.\nConverts to the left value, if any.\nConverts to the right value, if any.")